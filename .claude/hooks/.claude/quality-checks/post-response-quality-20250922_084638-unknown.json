{
  "timestamp": "2025-09-22T08:46:38.802303",
  "response_id": "unknown",
  "hook_type": "Stop",
  "project_directory": "D:\\github_development\\ai-agents\\.claude\\hooks",
  "quality_checks": {
    "formatting": {
      "formatter": "black",
      "status": "success",
      "files_formatted": [
        "--- D:\\github_development\\ai-agents\\.claude\\hooks\\cli_events\\post_tool_use.py\t2025-09-21 23:15:02.346842+00:00",
        "+++ D:\\github_development\\ai-agents\\.claude\\hooks\\cli_events\\post_tool_use.py\t2025-09-21 23:16:38.242262+00:00",
        "@@ -11,11 +11,11 @@",
        " from typing import Dict, Any, Optional",
        " ",
        " ",
        " def main() -> int:",
        "     \"\"\"Main entry point for PostToolUse hook.",
        "-    ",
        "+",
        "     Returns:",
        "         int: Exit code (0 for success, 1 for failure)",
        "     \"\"\"",
        "     # Add parent directory to path for imports",
        "     hooks_dir = Path(__file__).parent.parent",
        "--- D:\\github_development\\ai-agents\\.claude\\hooks\\cli_events\\stop.py\t2025-09-21 23:14:56.404435+00:00",
        "+++ D:\\github_development\\ai-agents\\.claude\\hooks\\cli_events\\stop.py\t2025-09-21 23:16:38.259479+00:00",
        "@@ -11,11 +11,11 @@",
        " from typing import Dict, Any, Optional",
        " ",
        " ",
        " def main() -> int:",
        "     \"\"\"Main entry point for Stop hook.",
        "-    ",
        "+",
        "     Returns:",
        "         int: Exit code (0 for success, 1 for failure)",
        "     \"\"\"",
        "     # Add parent directory to path for imports",
        "     hooks_dir = Path(__file__).parent.parent",
        "--- D:\\github_development\\ai-agents\\.claude\\hooks\\cli_events\\subagent_stop.py\t2025-09-21 23:14:56.408432+00:00",
        "+++ D:\\github_development\\ai-agents\\.claude\\hooks\\cli_events\\subagent_stop.py\t2025-09-21 23:16:38.275831+00:00",
        "@@ -11,11 +11,11 @@",
        " from typing import Dict, Any, Optional",
        " ",
        " ",
        " def main() -> int:",
        "     \"\"\"Main entry point for SubagentStop hook.",
        "-    ",
        "+",
        "     Returns:",
        "         int: Exit code (0 for success, 1 for failure)",
        "     \"\"\"",
        "     # Add parent directory to path for imports",
        "     hooks_dir = Path(__file__).parent.parent",
        "--- D:\\github_development\\ai-agents\\.claude\\hooks\\tools\\python_quality_manager.py\t2025-09-21 23:13:00.774123+00:00",
        "+++ D:\\github_development\\ai-agents\\.claude\\hooks\\tools\\python_quality_manager.py\t2025-09-21 23:16:38.648334+00:00",
        "@@ -586,25 +586,31 @@",
        "             return result",
        " ",
        "         # Determine if this is a UI component and set threshold",
        "         result[\"is_ui_component\"] = self._is_ui_component(file_path)",
        "         result[\"complexity_threshold\"] = self._get_complexity_threshold(file_path)",
        "-        logger.debug(f\"UI component: {result['is_ui_component']}, threshold: {result['complexity_threshold']}\")",
        "+        logger.debug(",
        "+            f\"UI component: {result['is_ui_component']}, threshold: {result['complexity_threshold']}\"",
        "+        )",
        " ",
        "         # Perform radon complexity analysis",
        "         self._handle_radon_complexity_analysis(file_path, result)",
        " ",
        "         # Perform radon maintainability analysis",
        "         self._handle_radon_maintainability_analysis(file_path, result)",
        " ",
        "         # Perform xenon complexity analysis",
        "         self._handle_xenon_complexity_analysis(file_path, result)",
        " ",
        "-        logger.debug(f\"Completed complexity analysis for: {file_path}, violations: {len(result['complexity_violations'])}\")",
        "+        logger.debug(",
        "+            f\"Completed complexity analysis for: {file_path}, violations: {len(result['complexity_violations'])}\"",
        "+        )",
        "         return result",
        " ",
        "-    def _handle_radon_complexity_analysis(self, file_path: Path, result: Dict[str, Any]) -> None:",
        "+    def _handle_radon_complexity_analysis(",
        "+        self, file_path: Path, result: Dict[str, Any]",
        "+    ) -> None:",
        "         \"\"\"",
        "         Handle radon cyclomatic complexity analysis with comprehensive logging.",
        " ",
        "         Args:",
        "             file_path: Path to the Python file being analyzed",
        "@@ -644,11 +650,13 @@",
        "         else:",
        "             logger.warning(f\"Radon complexity analysis failed: {stderr}\")",
        "             if stderr:",
        "                 result[\"errors\"].append(f\"radon cc error: {stderr}\")",
        " ",
        "-    def _handle_radon_maintainability_analysis(self, file_path: Path, result: Dict[str, Any]) -> None:",
        "+    def _handle_radon_maintainability_analysis(",
        "+        self, file_path: Path, result: Dict[str, Any]",
        "+    ) -> None:",
        "         \"\"\"",
        "         Handle radon maintainability index analysis with comprehensive logging.",
        " ",
        "         Args:",
        "             file_path: Path to the Python file being analyzed",
        "@@ -684,11 +692,13 @@",
        "         else:",
        "             logger.warning(f\"Radon maintainability analysis failed: {stderr}\")",
        "             if stderr:",
        "                 result[\"errors\"].append(f\"radon mi error: {stderr}\")",
        " ",
        "-    def _handle_xenon_complexity_analysis(self, file_path: Path, result: Dict[str, Any]) -> None:",
        "+    def _handle_xenon_complexity_analysis(",
        "+        self, file_path: Path, result: Dict[str, Any]",
        "+    ) -> None:",
        "         \"\"\"",
        "         Handle xenon complexity analysis with comprehensive logging.",
        " ",
        "         Args:",
        "             file_path: Path to the Python file being analyzed",
        "@@ -713,21 +723,25 @@",
        "             if result[\"complexity_threshold\"] >= 15",
        "             else f\"--max-average=A\"",
        "         )",
        " ",
        "         cmd = [\"xenon\", str(file_path), threshold_flag]",
        "-        logger.debug(f\"Executing xenon command: {' '.join(cmd)} (threshold: {threshold_flag})\")",
        "+        logger.debug(",
        "+            f\"Executing xenon command: {' '.join(cmd)} (threshold: {threshold_flag})\"",
        "+        )",
        " ",
        "         success, stdout, stderr = self._run_command(cmd)",
        " ",
        "         if not success and stderr:",
        "             logger.warning(f\"Xenon complexity violations detected: {stderr}\")",
        "             result[\"issues\"].append({\"tool\": \"xenon\", \"output\": stderr})",
        "         else:",
        "             logger.debug(\"Xenon complexity analysis passed without violations\")",
        " ",
        "-    def _process_complexity_violations(self, cc_data: Dict[str, Any], result: Dict[str, Any]) -> None:",
        "+    def _process_complexity_violations(",
        "+        self, cc_data: Dict[str, Any], result: Dict[str, Any]",
        "+    ) -> None:",
        "         \"\"\"",
        "         Process complexity violations from radon data with comprehensive logging.",
        " ",
        "         Args:",
        "             cc_data: Complexity data from radon",
        "@@ -744,11 +758,13 @@",
        "                     if isinstance(item, dict) and \"complexity\" in item:",
        "                         complexity = item[\"complexity\"]",
        "                         function_name = item.get(\"name\", \"unknown\")",
        "                         line_number = item.get(\"lineno\", 0)",
        " ",
        "-                        logger.debug(f\"Function '{function_name}' at line {line_number}: complexity {complexity}\")",
        "+                        logger.debug(",
        "+                            f\"Function '{function_name}' at line {line_number}: complexity {complexity}\"",
        "+                        )",
        " ",
        "                         if complexity >= result[\"complexity_threshold\"]:",
        "                             violation = {",
        "                                 \"function\": function_name,",
        "                                 \"complexity\": complexity,",
        ""
      ],
      "errors": [],
      "summary": "Found 5 recently modified files that need formatting"
    },
    "unicode_cleanup": {
      "status": "success",
      "files_cleaned": 0,
      "unicode_replaced": 0,
      "errors": [],
      "summary": "No unicode characters found in 5 recently modified files",
      "validation": []
    }
  },
  "hook_info": {
    "hook_type": "Stop",
    "hook_script": "D:\\github_development\\ai-agents\\.claude\\hooks\\post-response-quality-check.py",
    "execution_time": "2025-09-22T08:46:38.802321"
  }
}