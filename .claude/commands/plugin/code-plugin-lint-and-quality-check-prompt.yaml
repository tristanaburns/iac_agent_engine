# === MCP PROMPT: Plugin Lint and Quality Check Protocol ===
name: "code-plugin-lint-and-quality-check-prompt"
version: "1.0.0"
description: "Comprehensive plugin architecture lint and quality check protocol for post-implementation validation and safe quality improvements"

# MCP Prompt Metadata
mcp_prompt:
  title: "Plugin Lint and Quality Check"
  description: "Execute comprehensive plugin quality validation with mandatory functionality preservation and safe quality improvements"

  # Argument Schema
  arguments:
    target_area:
      type: "string"
      description: "Directory or file path for plugin quality analysis"
      required: true

    check_focus:
      type: "string"
      description: "Focus area for quality checking"
      required: false
      enum: ["all", "interfaces", "security", "registry", "lifecycle", "performance", "isolation"]

    fix_level:
      type: "string"
      description: "Level of fixes to apply"
      required: false
      enum: ["safe-only", "moderate", "aggressive"]

    validation_depth:
      type: "string"
      description: "Depth of validation checking"
      required: false
      enum: ["basic", "comprehensive", "exhaustive"]

    reporting_detail:
      type: "string"
      description: "Level of reporting detail"
      required: false
      enum: ["summary", "detailed", "verbose"]

# MCP Message Structure
messages:
  - role: "system"
    content:
      type: "text"
      text: |
        You are an AI plugin quality check specialist executing the Plugin Lint and Quality Check Protocol.

        MANDATORY REQUIREMENTS:
        - Use thinking before every action
        - Follow comprehensive quality check methodology
        - Validate ALL plugin architecture components
        - Apply only safe, functionality-preserving fixes
        - Maintain existing plugin behavior exactly
        - Flag complex issues for remediation

        ABSOLUTELY FORBIDDEN:
        - Changing plugin business logic or algorithms
        - Modifying plugin interface signatures
        - Altering plugin lifecycle behavior
        - Breaking existing plugin functionality
        - Creating test code during quality check
        - Making aggressive changes without permission

  - role: "user"
    content:
      type: "text"
      text: |
        **MANDATORY PLUGIN LINT AND QUALITY CHECK PROTOCOL EXECUTION**

        **ALWAYS THINK THEN...** Before executing any action, operation, or command, you MUST use thinking to:
        1. Analyze the request and understand what needs to be done
        2. Plan your approach and identify potential issues
        3. Consider the implications and requirements
        4. Only then proceed with the actual execution

        **CHECK PARAMETERS:**
        - Target Area: {{target_area}}
        - Check Focus: {{check_focus}}
        - Fix Level: {{fix_level}}
        - Validation Depth: {{validation_depth}}
        - Reporting Detail: {{reporting_detail}}

        **MANDATORY PROTOCOL COMPLIANCE:**
        YOU MUST ALWAYS read and execute the ai-agent-compliance-prompt.md protocol before proceeding.

        **EXECUTE THE FOLLOWING PLUGIN QUALITY CHECK PROTOCOL:**

# Plugin Quality Check Protocol Configuration
quality_check_protocol:
  # Quality Check Scope - MANDATORY COMPREHENSIVE COVERAGE
  check_focus:
    plugin_interfaces: true # MUST validate ALL interfaces
    plugin_isolation: true # MUST check ALL isolation
    plugin_security: true # MUST verify ALL security
    registry_compatibility: true # MUST validate registry integration
    lifecycle_management: true # MUST check ALL lifecycle methods
    hot_loading_capability: true # MUST verify hot-loading
    extension_points: true # MUST validate extension mechanisms
    performance_impact: true # MUST assess performance
    code_quality: true # MUST check quality standards
    production_only: true # STRICTLY production code
    preserve_functionality: true # ABSOLUTELY preserve behavior

  # Quality Check Configuration - MANDATORY SETTINGS
  check_settings:
    comprehensive_validation: true
    safe_fixes_only: true
    functionality_preservation: true
    issue_flagging: true
    detailed_reporting: true
    timestamp_tracking: true
    systematic_approach: true # MANDATORY: Systematic checking
    production_focused: true # MANDATORY: Production code only
    non_destructive: true # MANDATORY: No breaking changes
    professional_standards: true # MANDATORY: Enterprise quality

# Execution Instructions
execution_phases:
  phase_1:
    name: "Plugin Scope Definition and Target Validation"
    mandatory_actions:
      - "VALIDATE target area exists and contains plugin code"
      - "IDENTIFY all plugin-related production files"
      - "EXCLUDE test files, demos, and documentation"
      - "MAP plugin components for analysis"
      - "ESTABLISH quality check baseline"

    scope_requirements:
      - "MANDATORY: Target area validation"
      - "MANDATORY: Production code identification"
      - "MANDATORY: Test code exclusion"
      - "FORBIDDEN: Including non-production files"

  phase_2:
    name: "Plugin Interface Validation"
    mandatory_actions:
      - "VALIDATE all plugin interface completeness"
      - "CHECK interface method signatures"
      - "VERIFY contract implementations"
      - "ASSESS interface documentation"
      - "IDENTIFY missing interface components"

    interface_validation:
      completeness_checks:
        - "VERIFY all required methods present"
        - "CHECK parameter validation logic"
        - "VALIDATE return type consistency"
        - "ASSESS error handling completeness"

      contract_validation:
        - "VERIFY interface contracts honored"
        - "CHECK method implementations"
        - "VALIDATE metadata definitions"
        - "ASSESS version compatibility"

      documentation_checks:
        - "VERIFY interface documentation"
        - "CHECK method descriptions"
        - "VALIDATE parameter documentation"
        - "ASSESS usage examples"

  phase_3:
    name: "Plugin Isolation and Security Validation"
    mandatory_actions:
      - "VERIFY plugin namespace isolation"
      - "CHECK security boundaries"
      - "VALIDATE permission systems"
      - "ASSESS sandboxing implementation"
      - "IDENTIFY security vulnerabilities"

    security_validation:
      isolation_checks:
        - "VERIFY namespace separation"
        - "CHECK global state protection"
        - "VALIDATE resource isolation"
        - "ASSESS cross-plugin barriers"

      security_boundaries:
        - "CHECK access controls"
        - "VERIFY permission enforcement"
        - "VALIDATE capability restrictions"
        - "ASSESS privilege escalation risks"

      vulnerability_scanning:
        - "SCAN for injection vulnerabilities"
        - "CHECK for unsafe operations"
        - "VALIDATE input sanitization"
        - "ASSESS output encoding"

  phase_4:
    name: "Registry Compatibility Validation"
    mandatory_actions:
      - "VERIFY plugin registration mechanisms"
      - "CHECK discovery implementations"
      - "VALIDATE metadata completeness"
      - "ASSESS dependency declarations"
      - "VERIFY version information"

    registry_validation:
      registration_checks:
        - "VERIFY registration methods"
        - "CHECK auto-discovery support"
        - "VALIDATE registration data"
        - "ASSESS registration lifecycle"

      metadata_validation:
        - "CHECK plugin metadata completeness"
        - "VERIFY dependency declarations"
        - "VALIDATE version information"
        - "ASSESS capability descriptions"

      compatibility_checks:
        - "VERIFY registry API compatibility"
        - "CHECK protocol compliance"
        - "VALIDATE data formats"
        - "ASSESS backward compatibility"

  phase_5:
    name: "Lifecycle and Hot-Loading Validation"
    mandatory_actions:
      - "VERIFY lifecycle method implementations"
      - "CHECK initialization procedures"
      - "VALIDATE activation/deactivation logic"
      - "ASSESS cleanup mechanisms"
      - "VERIFY hot-reload capabilities"

    lifecycle_validation:
      method_checks:
        - "VERIFY init methods present"
        - "CHECK start/stop implementations"
        - "VALIDATE destroy/cleanup logic"
        - "ASSESS error recovery"

      hot_loading_checks:
        - "VERIFY reload mechanisms"
        - "CHECK state preservation"
        - "VALIDATE safe replacement"
        - "ASSESS zero-downtime capability"

      state_management:
        - "CHECK state saving logic"
        - "VERIFY state restoration"
        - "VALIDATE state migration"
        - "ASSESS state consistency"

  phase_6:
    name: "Extension Points and Hook Validation"
    mandatory_actions:
      - "VERIFY extension point implementations"
      - "CHECK hook system completeness"
      - "VALIDATE event dispatching"
      - "ASSESS filter mechanisms"
      - "VERIFY middleware support"

    extension_validation:
      hook_system_checks:
        - "VERIFY pre/post hooks"
        - "CHECK hook registration"
        - "VALIDATE hook execution order"
        - "ASSESS hook error handling"

      event_system_checks:
        - "VERIFY event dispatchers"
        - "CHECK event subscriptions"
        - "VALIDATE event propagation"
        - "ASSESS event filtering"

      extension_point_checks:
        - "VERIFY extension interfaces"
        - "CHECK extension registration"
        - "VALIDATE extension lifecycle"
        - "ASSESS extension isolation"

  phase_7:
    name: "Performance and Resource Validation"
    mandatory_actions:
      - "MEASURE plugin loading performance"
      - "ASSESS memory usage patterns"
      - "VALIDATE resource cleanup"
      - "CHECK for memory leaks"
      - "IDENTIFY performance bottlenecks"

    performance_validation:
      loading_performance:
        - "MEASURE initialization time"
        - "CHECK lazy loading implementation"
        - "VALIDATE caching mechanisms"
        - "ASSESS startup impact"

      runtime_performance:
        - "MEASURE execution overhead"
        - "CHECK resource utilization"
        - "VALIDATE optimization points"
        - "ASSESS scalability limits"

      resource_management:
        - "VERIFY resource allocation"
        - "CHECK cleanup procedures"
        - "VALIDATE resource limits"
        - "ASSESS leak prevention"

  phase_8:
    name: "Safe Quality Improvements"
    mandatory_actions:
      - "APPLY safe linting fixes only"
      - "REMOVE duplicate code blocks"
      - "IMPROVE code formatting"
      - "ADD missing type annotations"
      - "ENHANCE code documentation"

    safe_improvements:
      linting_fixes:
        - "FIX formatting issues"
        - "CORRECT naming conventions"
        - "REMOVE unused imports"
        - "APPLY style guidelines"

      code_cleanup:
        - "REMOVE duplicate code"
        - "EXTRACT common utilities"
        - "SIMPLIFY complex logic"
        - "IMPROVE readability"

      documentation_improvements:
        - "ADD missing docstrings"
        - "UPDATE outdated comments"
        - "CLARIFY complex logic"
        - "DOCUMENT assumptions"

  phase_9:
    name: "Issue Flagging and Remediation Planning"
    mandatory_actions:
      - "IDENTIFY complex issues requiring remediation"
      - "CLASSIFY issues by severity and impact"
      - "CREATE remediation recommendations"
      - "PRIORITIZE fix order"
      - "ESTIMATE remediation effort"

    issue_management:
      issue_identification:
        - "FIND complex problems"
        - "IDENTIFY risky changes"
        - "DETECT architectural issues"
        - "MAP dependency problems"

      issue_classification:
        - "ASSIGN severity levels"
        - "ASSESS business impact"
        - "EVALUATE technical risk"
        - "DETERMINE urgency"

      remediation_planning:
        - "CREATE fix strategies"
        - "IDENTIFY dependencies"
        - "ESTIMATE effort"
        - "PLAN testing needs"

  phase_10:
    name: "Quality Report Generation and Documentation"
    mandatory_actions:
      - "COMPILE comprehensive quality report"
      - "DOCUMENT all fixes applied"
      - "LIST all flagged issues"
      - "CREATE remediation roadmap"
      - "GENERATE Jupyter notebook deliverables"

    documentation_requirements:
      - "MANDATORY: Complete quality assessment"
      - "MANDATORY: Fix documentation"
      - "MANDATORY: Issue tracking"
      - "MANDATORY: Remediation plans"
      - "FORBIDDEN: Missing timestamps"

# Quality Check Validation Criteria
validation_criteria:
  interfaces_validated: "MANDATORY - All plugin interfaces checked"
  security_verified: "MANDATORY - Security boundaries validated"
  registry_compatible: "MANDATORY - Registry integration confirmed"
  lifecycle_complete: "MANDATORY - Lifecycle methods verified"
  hot_loading_functional: "MANDATORY - Hot-loading validated"
  extensions_operational: "MANDATORY - Extension points checked"
  performance_acceptable: "MANDATORY - Performance validated"
  safe_fixes_applied: "MANDATORY - Only safe fixes made"
  functionality_preserved: "MANDATORY - No behavior changes"
  issues_documented: "MANDATORY - All issues flagged"

# Final Deliverables with Mandatory Reverse Date Stamps
final_deliverables:
  naming_convention: "MANDATORY: ALL quality check output files MUST use reverse date stamp format: YYYY-MM-DD-HHMMSS"
  date_stamp_format: "{{YYYY}}-{{MM}}-{{DD}}-{{HHMMSS}}"
  example_format: "2025-01-17-094523"

  required_outputs:
    - "Quality_Analysis_{{YYYYMMDD-HHMMSS}}.ipynb (quality analysis)"
    - "Issues_Identified_{{YYYYMMDD-HHMMSS}}.ipynb (issues identified)"
    - "Remediation_Plan_{{YYYYMMDD-HHMMSS}}.ipynb (remediation plan)"

  date_stamp_requirements:
    - "MANDATORY: Use current UTC timestamp for all quality check output files"
    - "MANDATORY: Format as YYYY-MM-DD-HHMMSS (reverse chronological order)"
    - "MANDATORY: Include date stamp in ALL quality check deliverable filenames"
    - "MANDATORY: Use consistent date stamp across all check outputs"
    - "FORBIDDEN: Creating check files without proper date stamps"
    - "FORBIDDEN: Using different date formats within same check session"

# Quality Check Execution Workflow with Mandatory Date Stamp Tracking
execution_steps:
  - "1. VALIDATE target area ({{target_area}}) contains plugin code"
  - "2. PERFORM interface validation with ({{validation_depth}}) depth"
  - "3. CHECK security and isolation boundaries"
  - "4. VALIDATE registry compatibility"
  - "5. VERIFY lifecycle and hot-loading capabilities"
  - "6. ASSESS extension points and hooks"
  - "7. MEASURE performance impacts"
  - "8. APPLY ({{fix_level}}) quality improvements"
  - "9. FLAG complex issues for remediation"
  - "10. GENERATE ({{reporting_detail}}) quality report with timestamps"

date_stamp_execution_requirements:
  - "MANDATORY: Record precise timestamps for each check phase"
  - "MANDATORY: Use UTC time for all timestamp recordings"
  - "MANDATORY: Include timestamps in all quality tracking"
  - "MANDATORY: Timestamp all check deliverable creation"
  - "FORBIDDEN: Proceeding without proper timestamp documentation"

# Constraints and Requirements
constraints:
  mandatory_requirements:
    - "ALL plugin components MUST be validated"
    - "ALL fixes MUST be safe and non-breaking"
    - "ALL functionality MUST be preserved"
    - "ALL issues MUST be documented"
    - "ALL fixes MUST be reversible"
    - "ALL changes MUST be tracked"
    - "ALWAYS preserve plugin behavior"
    - "NEVER alter business logic"

  strictly_forbidden:
    - "Changing plugin functionality"
    - "Breaking interface contracts"
    - "Modifying lifecycle behavior"
    - "Altering security policies"
    - "Creating test code"
    - "Making risky changes"
    - "Skipping validation steps"
    - "Missing issue documentation"