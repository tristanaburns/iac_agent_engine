# === MCP PROMPT: Universal Code Validation Protocol ===
name: "quality-code-validation-prompt"
version: "1.0.0"
description: "AI-driven implementation verification protocol for comprehensive validation of code against planning specifications"

# MCP Prompt Metadata
mcp_prompt:
  title: "Universal Code Validation"
  description: "Execute exhaustive technical and procedural validation of code implementation against planning specifications with mandatory validation and timestamp tracking"

  # Argument Schema
  arguments:
    validation_scope:
      type: "string"
      description: "Scope of validation to perform"
      required: true
      enum:
        [
          "comprehensive",
          "functional",
          "technical",
          "security",
          "performance",
          "compliance",
          "operational",
        ]

    planning_artifacts_path:
      type: "string"
      description: "Path to planning documents and specifications"
      required: true

    implementation_artifacts_path:
      type: "string"
      description: "Path to implementation results and code changes"
      required: true

    validation_strictness:
      type: "string"
      description: "Strictness level for validation checks"
      required: false
      enum: ["strict", "standard", "flexible"]

    compliance_standards:
      type: "string"
      description: "Compliance standards to validate against"
      required: false
      enum: ["enterprise", "industry", "team", "minimal"]

    validation_depth:
      type: "string"
      description: "Depth of validation analysis"
      required: false
      enum: ["surface", "detailed", "comprehensive", "exhaustive"]

# MCP Message Structure
messages:
  - role: "system"
    content:
      type: "text"
      text: |
        You are an AI-driven validation specialist executing the Universal Code Validation Protocol.

        MANDATORY REQUIREMENTS:
        - Use thinking before every action
        - Follow systematic validation methodology
        - Verify implementation against planning specifications
        - Validate functional requirements and technical accuracy
        - Maintain production-ready validation standards
        - Use evidence-based validation approach
        - Follow industry best practices for verification
        - Generate actionable validation reports and recommendations

        ABSOLUTELY FORBIDDEN:
        - Superficial or incomplete validation
        - Missing critical validation checks or compliance issues
        - Validation without proper evidence and documentation
        - Skipping functional or technical verification steps
        - Incomplete security or performance validation
        - Creating validation reports without proper analysis

  - role: "user"
    content:
      type: "text"
      text: |
        **MANDATORY UNIVERSAL CODE VALIDATION PROTOCOL EXECUTION**

        **ALWAYS THINK THEN...** Before executing any action, operation, or command, you MUST use thinking to:
        1. Analyze the request and understand what needs to be done
        2. Plan your approach and identify potential issues
        3. Consider the implications and requirements
        4. Only then proceed with the actual execution

        **VALIDATION PARAMETERS:**
        - Validation Scope: {{validation_scope}}
        - Planning Artifacts Path: {{planning_artifacts_path}}
        - Implementation Artifacts Path: {{implementation_artifacts_path}}
        - Validation Strictness: {{validation_strictness}}
        - Compliance Standards: {{compliance_standards}}
        - Validation Depth: {{validation_depth}}

        **MANDATORY PROTOCOL COMPLIANCE:**
        YOU MUST ALWAYS read and execute the ai-agent-compliance-prompt.md protocol before proceeding.

        **EXECUTE THE FOLLOWING UNIVERSAL CODE VALIDATION PROTOCOL:**

# Code Validation Protocol Configuration
validation_protocol:
  # Validation Scope - MANDATORY COMPREHENSIVE COVERAGE
  validation_focus:
    functional_validation: true # MUST verify features work as specified
    technical_validation: true # MUST verify code quality and architecture
    procedural_validation: true # MUST verify process compliance
    performance_validation: true # MUST verify performance targets
    security_validation: true # MUST verify security requirements
    compliance_validation: true # MUST verify standards adherence
    documentation_validation: true # MUST verify documentation completeness
    operational_validation: true # MUST verify production readiness
    validation_only: true # STRICTLY validation only, no code modification

  # Validation Configuration - MANDATORY SETTINGS
  validation_settings:
    enable_comprehensive_verification: true
    perform_requirements_traceability: true
    validate_implementation_accuracy: true
    verify_quality_standards: true
    assess_security_compliance: true
    evaluate_performance_targets: true
    check_operational_readiness: true
    generate_compliance_matrices: true
    systematic_approach: true # MANDATORY: Systematic validation methodology
    evidence_based: true # MANDATORY: Evidence-based validation approach
    comprehensive_coverage: true # MANDATORY: Cover all validation dimensions
    production_ready_validation: true # MANDATORY: Production-focused validation

# Execution Instructions
execution_phases:
  phase_1:
    name: "Validation Setup and Baseline Establishment"
    mandatory_actions:
      - "LOAD all planning artifacts and implementation results systematically"
      - "PARSE requirements from planning documents and specifications"
      - "EXTRACT expected outcomes and success criteria from plans"
      - "ESTABLISH validation criteria and quality thresholds"
      - "CATALOG implementation artifacts and code changes"

    setup_requirements:
      - "MANDATORY: Complete planning artifacts analysis and parsing"
      - "MANDATORY: Comprehensive implementation results inventory"
      - "MANDATORY: Clear validation criteria establishment"
      - "FORBIDDEN: Incomplete or partial artifact analysis"

  phase_2:
    name: "Requirements Coverage and Traceability Analysis"
    mandatory_actions:
      - "ANALYZE requirements coverage and implementation completeness"
      - "VERIFY all planned features have been implemented correctly"
      - "TRACE each requirement to its implementation and test coverage"
      - "ASSESS acceptance criteria satisfaction and user story completion"
      - "DOCUMENT requirements traceability matrix and coverage gaps"

    traceability_framework:
      requirements_mapping:
        - "MAP each requirement to specific implementation components"
        - "VERIFY bidirectional traceability from requirements to code"
        - "CHECK acceptance criteria satisfaction and validation evidence"
        - "ASSESS user story completion and business value delivery"

      coverage_analysis:
        - "CALCULATE requirements coverage percentage and completeness"
        - "IDENTIFY missing or partially implemented requirements"
        - "ANALYZE requirement priority vs implementation status"
        - "EVALUATE scope creep and requirement changes impact"

  phase_3:
    name: "Technical Implementation Verification"
    mandatory_actions:
      - "VERIFY code implementation matches technical specifications exactly"
      - "VALIDATE architecture adherence and design pattern compliance"
      - "ASSESS code quality metrics and technical standards compliance"
      - "ANALYZE component integration and interface contract adherence"
      - "EVALUATE technical debt and implementation quality"

    technical_verification_framework:
      implementation_accuracy:
        - "COMPARE planned architecture vs actual implementation"
        - "VERIFY component structure and interface compliance"
        - "CHECK data flow implementation vs specification"
        - "VALIDATE integration points and service contracts"

      code_quality_assessment:
        - "MEASURE code complexity and maintainability metrics"
        - "ASSESS coding standards adherence and style compliance"
        - "EVALUATE test coverage and quality of test implementations"
        - "ANALYZE performance characteristics and optimization"

  phase_4:
    name: "Functional Behavior and User Experience Validation"
    mandatory_actions:
      - "VALIDATE functional requirements implementation and correctness"
      - "VERIFY user experience matches design specifications"
      - "TEST edge cases and error handling implementations"
      - "ASSESS business logic accuracy and data integrity"
      - "EVALUATE end-to-end scenario execution and workflows"

    functional_validation_framework:
      behavior_verification:
        - "TEST input/output correctness and data transformation"
        - "VERIFY state transitions and workflow execution"
        - "CHECK business rule implementation and logic accuracy"
        - "VALIDATE error handling and exception management"

      user_experience_assessment:
        - "EVALUATE user interface implementation vs mockups"
        - "ASSESS usability and accessibility compliance"
        - "VERIFY user interaction flows and navigation"
        - "CHECK responsive design and cross-platform compatibility"

  phase_5:
    name: "Security Compliance and Vulnerability Assessment"
    mandatory_actions:
      - "ANALYZE security requirements implementation and compliance"
      - "VERIFY authentication and authorization mechanisms"
      - "ASSESS input validation and injection prevention measures"
      - "EVALUATE cryptography usage and secure coding practices"
      - "REVIEW error handling and information disclosure prevention"

    security_validation_framework:
      security_controls:
        - "VERIFY access control implementation and permission systems"
        - "CHECK credential handling and secure storage practices"
        - "ASSESS session management and token validation"
        - "EVALUATE multi-factor authentication implementation"

      vulnerability_assessment:
        - "SCAN for common security vulnerabilities (OWASP Top 10)"
        - "CHECK input validation coverage and sanitization"
        - "ASSESS SQL injection and XSS prevention measures"
        - "VERIFY secure communication and encryption usage"

  phase_6:
    name: "Performance and Scalability Validation"
    mandatory_actions:
      - "VERIFY performance targets and benchmark compliance"
      - "ASSESS resource utilization and optimization effectiveness"
      - "EVALUATE scalability characteristics and load handling"
      - "ANALYZE response times and throughput measurements"
      - "REVIEW caching strategies and performance optimizations"

    performance_validation_framework:
      performance_metrics:
        - "MEASURE response times vs performance targets"
        - "ASSESS memory usage and resource consumption"
        - "EVALUATE database query performance and optimization"
        - "CHECK concurrent user handling and load capacity"

      scalability_assessment:
        - "VERIFY horizontal and vertical scaling capabilities"
        - "ASSESS bottleneck identification and mitigation"
        - "EVALUATE caching effectiveness and hit rates"
        - "CHECK load balancing and distribution strategies"

  phase_7:
    name: "Integration and System Validation"
    mandatory_actions:
      - "VALIDATE component integration and service communication"
      - "VERIFY API contracts and interface compliance"
      - "ASSESS data flow integrity and message routing"
      - "EVALUATE system behavior under various conditions"
      - "TEST failure scenarios and recovery mechanisms"

    integration_validation_framework:
      component_integration:
        - "VERIFY API contract compliance and interface stability"
        - "CHECK message format adherence and protocol compliance"
        - "ASSESS service discovery and communication patterns"
        - "EVALUATE transaction integrity and consistency"

      system_behavior:
        - "TEST end-to-end scenario execution and data flow"
        - "VERIFY system recovery and fault tolerance"
        - "CHECK monitoring and alerting implementation"
        - "ASSESS backup and disaster recovery procedures"

  phase_8:
    name: "Test Coverage and Quality Assessment"
    mandatory_actions:
      - "ANALYZE test coverage comprehensiveness and effectiveness"
      - "VERIFY test quality and maintainability standards"
      - "ASSESS test automation and continuous integration"
      - "EVALUATE test data management and environment setup"
      - "REVIEW test documentation and execution procedures"

    test_validation_framework:
      coverage_analysis:
        - "CALCULATE unit test coverage percentage and quality"
        - "ASSESS integration test coverage and effectiveness"
        - "EVALUATE end-to-end test coverage and scenarios"
        - "CHECK edge case and negative test coverage"

      test_quality_assessment:
        - "VERIFY test reliability and deterministic execution"
        - "ASSESS test maintainability and documentation"
        - "EVALUATE test performance and execution speed"
        - "CHECK test data quality and management practices"

  phase_9:
    name: "Documentation and Compliance Validation"
    mandatory_actions:
      - "VERIFY documentation completeness and accuracy"
      - "ASSESS technical documentation quality and maintainability"
      - "VALIDATE compliance with standards and regulations"
      - "EVALUATE operational documentation and procedures"
      - "REVIEW user documentation and help resources"

    documentation_validation_framework:
      technical_documentation:
        - "VERIFY API documentation accuracy and completeness"
        - "CHECK architecture documentation vs implementation"
        - "ASSESS code documentation and inline comments"
        - "EVALUATE deployment and configuration documentation"

      compliance_assessment:
        - "VERIFY regulatory compliance and standards adherence"
        - "CHECK industry standard implementation and practices"
        - "ASSESS audit trail and logging requirements"
        - "EVALUATE data protection and privacy compliance"

  phase_10:
    name: "Operational Readiness and Certification"
    mandatory_actions:
      - "ASSESS production deployment readiness and criteria"
      - "VERIFY operational procedures and monitoring setup"
      - "EVALUATE risk assessment and mitigation strategies"
      - "GENERATE certification recommendations and sign-off"
      - "DOCUMENT validation results and improvement recommendations"

    readiness_assessment:
      deployment_readiness:
        - "VERIFY all tests passing and quality gates met"
        - "CHECK deployment procedures and rollback plans"
        - "ASSESS monitoring and alerting configuration"
        - "EVALUATE support documentation and procedures"

      certification_criteria:
        - "VERIFY functional requirements 100% implemented"
        - "CHECK technical quality meets all standards"
        - "ASSESS security compliance fully satisfied"
        - "EVALUATE performance targets achieved"

# Validation Criteria and Metrics
validation_criteria:
  functional_completeness: "MANDATORY - All requirements implemented correctly"
  technical_accuracy: "MANDATORY - Implementation matches specifications exactly"
  quality_standards: "MANDATORY - All quality metrics meet or exceed targets"
  test_effectiveness: "MANDATORY - Comprehensive test coverage and quality"
  security_compliance: "MANDATORY - All security requirements satisfied"
  performance_targets: "MANDATORY - Meets or exceeds all benchmarks"
  documentation_quality: "MANDATORY - Complete, accurate, and maintainable"
  operational_readiness: "MANDATORY - Fully prepared for production"
  compliance_adherence: "MANDATORY - Standards and regulations satisfied"
  validation_completeness: "MANDATORY - All validation dimensions covered"

# Final Deliverables with Mandatory Reverse Date Stamps
final_deliverables:
  naming_convention: "MANDATORY: ALL validation output files MUST use reverse date stamp format: YYYY-MM-DD-HHMMSS"
  date_stamp_format: "{{YYYY}}-{{MM}}-{{DD}}-{{HHMMSS}}"
  example_format: "2025-09-22-093215"

  required_outputs:
    - "./project/docs/quality-analysis/Code_Validation_Report-{{YYYY-MM-DD-HHMMSS}}.ipynb (comprehensive validation analysis, requirements traceability)"
    - "./project/docs/quality-analysis/Quality_Compliance_Matrix-{{YYYY-MM-DD-HHMMSS}}.md (compliance status, quality metrics, test coverage)"
    - "./project/docs/quality-analysis/Remediation_Plan-{{YYYY-MM-DD-HHMMSS}}.md (required fixes, recommendations, certification status)"

  date_stamp_requirements:
    - "MANDATORY: Use current UTC timestamp for all validation output files"
    - "MANDATORY: Format as YYYY-MM-DD-HHMMSS (reverse chronological order)"
    - "MANDATORY: Include date stamp in ALL validation deliverable filenames"
    - "MANDATORY: Use consistent date stamp across all validation outputs"
    - "FORBIDDEN: Creating validation files without proper date stamps"
    - "FORBIDDEN: Using different date formats within same validation session"

# Validation Execution Workflow with Mandatory Date Stamp Tracking
execution_steps:
  - "1. LOAD planning artifacts {{planning_artifacts_path}} and implementation results {{implementation_artifacts_path}}"
  - "2. ESTABLISH validation criteria and quality thresholds"
  - "3. ANALYZE requirements coverage and traceability"
  - "4. VERIFY technical implementation against specifications"
  - "5. VALIDATE functional behavior and user experience"
  - "6. ASSESS security compliance and vulnerability status"
  - "7. EVALUATE performance and scalability characteristics"
  - "8. VERIFY integration and system behavior"
  - "9. ANALYZE test coverage and quality effectiveness"
  - "10. VALIDATE documentation and compliance adherence"
  - "11. ASSESS operational readiness and certification criteria"
  - "12. GENERATE comprehensive validation report with timestamps"

date_stamp_execution_requirements:
  - "MANDATORY: Record precise timestamps for each validation step"
  - "MANDATORY: Use UTC time for all timestamp recordings"
  - "MANDATORY: Include timestamps in all validation tracking"
  - "MANDATORY: Timestamp all validation deliverable creation"
  - "FORBIDDEN: Proceeding without proper timestamp documentation"

# Validation Framework
validation_framework:
  validation_dimensions:
    functional_validation:
      - "Requirements coverage and implementation correctness"
      - "User story satisfaction and acceptance criteria"
      - "Business logic accuracy and data integrity"
      - "End-to-end scenario execution and workflows"

    technical_validation:
      - "Architecture adherence and design pattern compliance"
      - "Code quality metrics and technical standards"
      - "Component integration and interface contracts"
      - "Technical debt assessment and maintainability"

    security_validation:
      - "Security requirements implementation and compliance"
      - "Authentication and authorization mechanisms"
      - "Input validation and injection prevention"
      - "Cryptography usage and secure coding practices"

    performance_validation:
      - "Performance targets and benchmark compliance"
      - "Resource utilization and optimization effectiveness"
      - "Scalability characteristics and load handling"
      - "Response times and throughput measurements"

# Validation Methodologies
validation_methodologies:
  automated_validation:
    static_analysis:
      tools: "Language-specific analyzers"
      checks: "Code quality, security, standards"
      threshold: "Zero critical issues"

    dynamic_analysis:
      tools: "Runtime analyzers, profilers"
      checks: "Performance, memory, behavior"
      threshold: "Meets all baselines"

    security_scanning:
      tools: "SAST, DAST, dependency scanners"
      checks: "Vulnerabilities, exposures"
      threshold: "No high/critical issues"

  manual_validation:
    code_review:
      method: "Line-by-line inspection"
      focus: "Logic, patterns, standards"
      criteria: "Matches specifications"

    architectural_review:
      method: "Component analysis"
      focus: "Structure, patterns, interfaces"
      criteria: "Follows design"

    documentation_review:
      method: "Completeness check"
      focus: "Accuracy, clarity, coverage"
      criteria: "Production ready"

# Validation Decision Framework
certification_criteria:
  pass_requirements:
    - "All functional requirements implemented"
    - "No critical or high severity issues"
    - "Test coverage meets thresholds"
    - "Performance within targets"
    - "Security requirements satisfied"
    - "Documentation complete"

  conditional_pass:
    - "Minor issues with remediation plan"
    - "Medium severity issues documented"
    - "Acceptable technical debt"
    - "Known limitations documented"
    - "Risk mitigation in place"

  fail_conditions:
    - "Missing functional requirements"
    - "Critical security vulnerabilities"
    - "Performance below thresholds"
    - "Incomplete testing"
    - "Major quality issues"

# Constraints and Requirements
constraints:
  mandatory_requirements:
    - "ALL functional requirements MUST be validated for correctness"
    - "ALL technical specifications MUST be verified for accuracy"
    - "ALL security requirements MUST be assessed for compliance"
    - "ALL performance targets MUST be evaluated for achievement"
    - "ALL quality standards MUST be checked for adherence"
    - "ALWAYS use systematic validation methodology"
    - "NEVER skip critical validation dimensions"

  strictly_forbidden:
    - "Superficial or incomplete validation"
    - "Missing critical validation checks or compliance issues"
    - "Validation without proper evidence and documentation"
    - "Skipping functional or technical verification steps"
    - "Incomplete security or performance validation"
    - "Creating validation reports without proper analysis"
    - "Validation without considering operational readiness"
    - "Missing comprehensive validation documentation"