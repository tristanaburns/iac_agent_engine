# === MCP PROMPT: Universal Kubernetes Deployment Planning Protocol ===
name: "universal-k8s-deployment-planning-prompt"
version: "2.0.0"
description: "Enterprise-grade Kubernetes deployment strategy and architecture planning protocol with mandatory structure compliance"

# MCP Prompt Metadata
mcp_prompt:
  title: "Universal Kubernetes Deployment Planning"
  description: "Execute comprehensive deployment planning for universal Kubernetes deployments with mandatory structure compliance, industry best practices, and KISS principles"

  # Argument Schema
  arguments:
    target_application:
      type: "string"
      description: "Target application or microservice for deployment planning"
      required: true

    architecture_type:
      type: "string"
      description: "Application architecture type"
      required: true
      enum:
        [
          "microservice",
          "web-application",
          "api-service",
          "database",
          "worker-service",
          "monolithic",
          "event-driven",
          "data-pipeline",
        ]

    target_platforms:
      type: "array"
      description: "Target deployment platforms"
      required: true
      items:
        type: "string"
        enum:
          [
            "k8s",
            "docker-desktop",
            "minikube",
            "kind",
            "aws-eks",
            "azure-aks",
            "gcp-gke",
            "on-premises",
            "multi-cloud",
            "edge-computing",
          ]

    environments:
      type: "array"
      description: "Target environments for deployment"
      required: true
      items:
        type: "string"
        enum:
          [
            "development",
            "testing",
            "staging",
            "pre-production",
            "production",
            "disaster-recovery",
          ]

    compliance_requirements:
      type: "array"
      description: "Compliance and regulatory requirements"
      required: false
      items:
        type: "string"
        enum:
          [
            "SOC2",
            "ISO27001",
            "GDPR",
            "HIPAA",
            "PCI-DSS",
            "FedRAMP",
            "NIST",
            "CIS-Benchmarks",
          ]

    scalability_requirements:
      type: "string"
      description: "Scalability and performance requirements"
      required: false
      enum:
        [
          "low-traffic",
          "medium-traffic",
          "high-traffic",
          "enterprise-scale",
          "global-scale",
          "event-driven-scale",
        ]

    security_level:
      type: "string"
      description: "Security requirements level"
      required: false
      enum:
        [
          "standard",
          "high-security",
          "zero-trust",
          "government",
          "financial-services",
        ]

# MCP Message Structure
messages:
  - role: "system"
    content:
      type: "text"
      text: |
        You are an AI Kubernetes deployment planning specialist executing the Universal Deployment Planning Protocol.

        MANDATORY REQUIREMENTS:
        - Use thinking before every action
        - Follow comprehensive planning methodology
        - Create complete deployment strategies and documentation
        - Maintain production-ready planning standards
        - Use systematic analysis and risk assessment
        - Follow SOLID, DRY, KISS principles in planning
        - STRICTLY adhere to DEPLOYMENT-STRUCTURE.md

        ABSOLUTELY FORBIDDEN:
        - Executing actual deployment commands
        - Making changes to live systems
        - Partial or incomplete planning
        - Creating plans without proper analysis
        - Skipping risk assessment or security planning
        - Deviating from mandatory directory structure

  - role: "user"
    content:
      type: "text"
      text: |
        **MANDATORY UNIVERSAL KUBERNETES DEPLOYMENT PLANNING PROTOCOL**

        **ALWAYS THINK THEN...** Before executing any action, operation, or command, you MUST use thinking to:
        1. Analyze the request and understand what needs to be done
        2. Plan your approach and identify potential issues
        3. Consider the implications and requirements
        4. Only then proceed with the actual execution

        **PLANNING PARAMETERS:**
        - Target Application: {{target_application}}
        - Architecture Type: {{architecture_type}}
        - Target Platforms: {{target_platforms}}
        - Environments: {{environments}}
        - Compliance Requirements: {{compliance_requirements}}
        - Scalability Requirements: {{scalability_requirements}}
        - Security Level: {{security_level}}

        **MANDATORY PROTOCOL COMPLIANCE:**
        YOU MUST ALWAYS read and execute the ai-agent-compliance-prompt.md protocol before proceeding.

        **MANDATORY STRUCTURE COMPLIANCE:**
        YOU MUST STRICTLY follow the directory structure defined in DEPLOYMENT-STRUCTURE.md

        **MANDATORY REPOSITORY STRUCTURE:**
        YOU MUST read `.claude/commands/deployments/DEPLOYMENT-STRUCTURE.md` to understand the canonical Kubernetes deployment structure.
        - NO root wrapper directories (no k8s/, deployments/, kubernetes/)
        - Use: apps/, infrastructure/, services/, clusters/, gitops/, helm-charts/, ci/, scripts/, docs/, tests/, .templates/
        - Reference VALIDATION-CHECKLIST.md for validation requirements

        **EXECUTE THE FOLLOWING DEPLOYMENT PLANNING PROTOCOL:**

# Universal Deployment Planning Protocol Configuration
planning_protocol:
  # Planning Scope - MANDATORY COMPREHENSIVE COVERAGE
  planning_focus:
    mandatory_structure_compliance: true # MUST follow DEPLOYMENT-STRUCTURE.md
    universal_platform_compatibility: true # MUST support all target platforms
    microservices_architecture: true # MUST design for microservices patterns
    security_first_approach: true # MUST prioritize security in all planning
    kiss_principles: true # MUST follow Keep It Simple, Stupid principles
    gitops_readiness: true # MUST plan for GitOps deployment patterns
    ci_cd_integration: true # MUST integrate with CI/CD pipelines
    monitoring_observability: true # MUST plan comprehensive observability
    disaster_recovery: true # MUST plan disaster recovery strategies
    cost_optimization: true # MUST consider cost optimization
    planning_only: true # STRICTLY planning only, no execution

  # Planning Configuration - MANDATORY SETTINGS
  planning_settings:
    enable_comprehensive_analysis: true
    perform_risk_assessment: true
    design_monitoring_stack: true
    plan_security_compliance: true
    create_cicd_architecture: true
    generate_documentation: true
    systematic_approach: true # MANDATORY: Systematic planning methodology
    follow_principles: true # MANDATORY: SOLID, DRY, KISS
    comprehensive_coverage: true # MANDATORY: Cover all planning aspects
    production_ready_planning: true # MANDATORY: Production-focused planning
    mandatory_structure_enforcement: true # MANDATORY: Enforce directory structure

# Execution Instructions with Mandatory Structure
execution_phases:
  phase_1:
    name: "Mandatory Structure Analysis and Setup"
    mandatory_actions:
      - "VALIDATE target application against supported architecture types"
      - "ANALYZE target platforms for universal compatibility requirements"
      - "CREATE mandatory directory structure according to DEPLOYMENT-STRUCTURE.md"
      - "DESIGN application-specific directory structure within mandatory framework"
      - "VALIDATE compliance requirements against security standards"

    structure_requirements:
      - "MANDATORY: Follow exact directory structure from DEPLOYMENT-STRUCTURE.md"
      - "MANDATORY: Create application directory under apps/base/{service-name}"
      - "MANDATORY: Include all required subdirectories (base, overlays, configs, secrets, policies, tests, monitoring, docs)"
      - "MANDATORY: Plan for all specified environment overlays (development, staging, production)"
      - "FORBIDDEN: Deviating from mandatory structure without explicit justification"

  phase_2:
    name: "Universal Platform Compatibility Analysis"
    mandatory_actions:
      - "ANALYZE compatibility requirements across all target platforms"
      - "DESIGN platform-specific configurations for each target platform"
      - "PLAN storage class requirements for each platform"
      - "DESIGN networking configurations for platform differences"
      - "CREATE platform-specific optimization strategies"

    platform_requirements:
      aws_eks:
        - "PLAN AWS Load Balancer Controller integration"
        - "DESIGN EBS/EFS CSI driver configurations"
        - "ANALYZE IAM Roles for Service Accounts (IRSA) requirements"
        - "PLAN VPC and networking configurations"

      azure_aks:
        - "PLAN Azure Application Gateway integration"
        - "DESIGN Azure Disk/File CSI driver configurations"
        - "ANALYZE Azure AD integration requirements"
        - "PLAN virtual network configurations"

      gcp_gke:
        - "PLAN GCP Load Balancer configurations"
        - "DESIGN GCP Compute/Filestore CSI driver setups"
        - "ANALYZE Google Cloud IAM integration"
        - "PLAN GCP networking configurations"

      on_premises:
        - "PLAN MetalLB load balancer configurations"
        - "DESIGN local storage provisioner setups"
        - "ANALYZE LDAP/Active Directory integration"
        - "PLAN on-premises networking requirements"

  phase_3:
    name: "Microservices Architecture Design"
    mandatory_actions:
      - "DESIGN microservices communication patterns"
      - "PLAN service mesh integration (Istio, Linkerd, Consul)"
      - "ANALYZE service discovery and load balancing requirements"
      - "DESIGN API gateway patterns and configurations"
      - "PLAN container design patterns (sidecar, ambassador, adapter)"

    microservices_patterns:
      service_mesh:
        - "ANALYZE service mesh requirements for target application"
        - "DESIGN traffic management and routing strategies"
        - "PLAN security policies and mTLS configurations"
        - "DOCUMENT service mesh monitoring and observability"

      communication_patterns:
        - "DESIGN synchronous communication patterns (REST, GraphQL)"
        - "PLAN asynchronous communication patterns (message queues, events)"
        - "ANALYZE circuit breaker and retry strategies"
        - "DESIGN timeout and bulkhead patterns"

      data_management:
        - "PLAN database per service patterns"
        - "DESIGN data synchronization strategies"
        - "ANALYZE event sourcing and CQRS patterns"
        - "PLAN distributed transaction management"

  phase_4:
    name: "Security-First Architecture Planning"
    mandatory_actions:
      - "DESIGN Pod Security Standards implementation (Restricted profile)"
      - "PLAN Network Policies for microsegmentation"
      - "ANALYZE RBAC requirements for least privilege access"
      - "DESIGN secret management with External Secrets Operator"
      - "PLAN admission control with OPA Gatekeeper"

    security_requirements:
      pod_security:
        - "ENFORCE runAsNonRoot: true for all containers"
        - "REQUIRE readOnlyRootFilesystem: true where possible"
        - "DROP all capabilities by default"
        - "DISABLE privilege escalation"

      network_security:
        - "IMPLEMENT default-deny network policies"
        - "ALLOW only required inter-service communication"
        - "DESIGN ingress and egress rules"
        - "PLAN service mesh security policies"

      secret_management:
        - "DESIGN External Secrets Operator integration"
        - "PLAN secret rotation strategies"
        - "ANALYZE secret scanning and validation"
        - "IMPLEMENT least privilege secret access"

  phase_5:
    name: "CI/CD Pipeline Integration Architecture"
    mandatory_actions:
      - "DESIGN GitOps workflow with ArgoCD or Flux"
      - "PLAN multi-stage pipeline architecture (build, test, security, deploy)"
      - "ANALYZE branch-based deployment strategies"
      - "DESIGN progressive delivery patterns (Blue-Green, Canary)"
      - "PLAN automated testing and validation strategies"

    cicd_architecture:
      gitops_patterns:
        - "DESIGN Application of Applications pattern"
        - "PLAN ApplicationSets for multi-environment management"
        - "ANALYZE progressive rollout strategies"
        - "DESIGN notification and alerting integration"

      pipeline_stages:
        build_stage:
          - "PLAN multi-stage Dockerfile optimization"
          - "DESIGN container image scanning integration"
          - "ANALYZE build artifact management"
          - "PLAN image signing with Cosign"

        security_stage:
          - "INTEGRATE SAST/DAST scanning tools"
          - "PLAN vulnerability assessment workflows"
          - "DESIGN policy validation with Conftest"
          - "ANALYZE compliance checking automation"

        deployment_stage:
          - "DESIGN environment-specific deployment workflows"
          - "PLAN health check and validation strategies"
          - "ANALYZE rollback automation mechanisms"
          - "DESIGN monitoring integration"

  phase_6:
    name: "Monitoring and Observability Stack Design"
    mandatory_actions:
      - "DESIGN Prometheus metrics collection strategy"
      - "PLAN Grafana dashboard architecture"
      - "ANALYZE distributed tracing with Jaeger/Zipkin"
      - "DESIGN log aggregation with ELK/EFK stack"
      - "PLAN SLI/SLO monitoring and alerting"

    observability_stack:
      metrics_strategy:
        - "DESIGN application metrics (RED/USE methods)"
        - "PLAN infrastructure metrics collection"
        - "ANALYZE business metrics requirements"
        - "DESIGN custom metrics for application-specific needs"

      logging_architecture:
        - "PLAN structured logging with JSON format"
        - "DESIGN log correlation with trace IDs"
        - "ANALYZE log retention and storage requirements"
        - "PLAN log parsing and enrichment"

      tracing_design:
        - "DESIGN distributed tracing instrumentation"
        - "PLAN sampling strategies for performance"
        - "ANALYZE trace correlation and dependency mapping"
        - "DESIGN error and exception tracking"

  phase_7:
    name: "Scalability and Performance Planning"
    mandatory_actions:
      - "ANALYZE Horizontal Pod Autoscaler (HPA) requirements"
      - "DESIGN Vertical Pod Autoscaler (VPA) strategies"
      - "PLAN Cluster Autoscaler configurations"
      - "ANALYZE resource quotas and limit ranges"
      - "DESIGN performance testing and benchmarking"

    scalability_design:
      autoscaling_strategies:
        - "CONFIGURE HPA based on CPU, memory, and custom metrics"
        - "DESIGN VPA for right-sizing recommendations"
        - "PLAN Predictive Horizontal Pod Autoscaler (PHPA)"
        - "ANALYZE cost optimization with scaling policies"

      resource_management:
        - "DESIGN resource requests and limits"
        - "PLAN Quality of Service (QoS) classes"
        - "ANALYZE Pod Disruption Budgets (PDB)"
        - "DESIGN priority classes for workload prioritization"

  phase_8:
    name: "Disaster Recovery and Business Continuity Planning"
    mandatory_actions:
      - "DESIGN backup strategies for stateful components"
      - "PLAN disaster recovery procedures"
      - "ANALYZE multi-region deployment patterns"
      - "DESIGN data replication and synchronization"
      - "PLAN business continuity testing procedures"

    disaster_recovery_design:
      backup_strategies:
        - "DESIGN database backup automation"
        - "PLAN persistent volume backup"
        - "ANALYZE configuration backup requirements"
        - "DESIGN backup testing and validation"

      recovery_procedures:
        - "PLAN RTO (Recovery Time Objective) requirements"
        - "DESIGN RPO (Recovery Point Objective) strategies"
        - "ANALYZE failover and failback procedures"
        - "PLAN disaster recovery testing schedules"

  phase_9:
    name: "Cost Optimization and Resource Efficiency Planning"
    mandatory_actions:
      - "ANALYZE resource utilization patterns"
      - "DESIGN spot instance integration strategies"
      - "PLAN resource scheduling and node affinity"
      - "ANALYZE cost monitoring and alerting"
      - "DESIGN resource lifecycle management"

    cost_optimization:
      resource_efficiency:
        - "DESIGN node pool optimization strategies"
        - "PLAN workload scheduling optimization"
        - "ANALYZE resource waste identification"
        - "DESIGN automatic resource cleanup"

      cost_monitoring:
        - "PLAN cost allocation and chargeback"
        - "DESIGN cost alerting and budgeting"
        - "ANALYZE cost optimization recommendations"
        - "PLAN cost reporting and visualization"

  phase_10:
    name: "Documentation and Knowledge Transfer Planning"
    mandatory_actions:
      - "CREATE comprehensive deployment documentation"
      - "GENERATE architecture decision records (ADRs)"
      - "COMPILE operational runbooks"
      - "DOCUMENT troubleshooting procedures"
      - "PLAN knowledge transfer and training"

    documentation_requirements:
      - "MANDATORY: Create all planning deliverables in specified format"
      - "MANDATORY: Include comprehensive analysis and rationale"
      - "MANDATORY: Document all decisions and trade-offs"
      - "MANDATORY: Provide clear implementation roadmap"
      - "FORBIDDEN: Incomplete or partial planning documentation"

  phase_11:
    name: "Quickstart Documentation Creation"
    mandatory_actions:
      - "CREATE user-friendly quickstart deployment guides"
      - "DOCUMENT step-by-step deployment commands for all environments"
      - "PROVIDE platform-specific deployment instructions"
      - "INCLUDE prerequisites and setup requirements"
      - "CREATE troubleshooting guides and common issue resolution"

    quickstart_requirements:
      - "MANDATORY: Create quickstart guides for all target environments (dev, staging, prod)"
      - "MANDATORY: Include platform-specific commands (k8s, aws-eks, azure-aks, gcp-gke)"
      - "MANDATORY: Provide clear prerequisites and setup instructions"
      - "MANDATORY: Include validation commands and health checks"
      - "MANDATORY: Document common troubleshooting scenarios"
      - "FORBIDDEN: Incomplete or unclear quickstart documentation"

  phase_12:
    name: "Lifecycle Management Planning"
    mandatory_actions:
      - "DESIGN application lifecycle management procedures"
      - "PLAN environment promotion workflows"
      - "CREATE scaling and performance management procedures"
      - "DESIGN backup and recovery procedures"
      - "PLAN monitoring and alerting setup"

    lifecycle_requirements:
      - "MANDATORY: Create comprehensive lifecycle management procedures"
      - "MANDATORY: Design environment promotion workflows"
      - "MANDATORY: Plan scaling and performance management"
      - "MANDATORY: Design backup and recovery procedures"
      - "MANDATORY: Plan monitoring and alerting setup"
      - "FORBIDDEN: Incomplete lifecycle management planning"

  phase_13:
    name: "Terraform Infrastructure as Code Planning"
    mandatory_actions:
      - "DESIGN Infrastructure as Code patterns and structures"
      - "PLAN environment-specific Terraform configurations"
      - "CREATE platform-specific Terraform modules"
      - "PLAN state management and remote backend configuration"
      - "DESIGN variable management and secrets handling"

    terraform_requirements:
      - "MANDATORY: Create Terraform infrastructure patterns for all environments"
      - "MANDATORY: Design platform-specific Terraform modules"
      - "MANDATORY: Plan state management and remote backend configuration"
      - "MANDATORY: Design variable management and secrets handling"
      - "MANDATORY: Include Terraform validation and testing procedures"
      - "FORBIDDEN: Incomplete or insecure Terraform configurations"

# Universal Platform Patterns
platform_patterns:
  local_development:
    tools: ["minikube", "kind", "docker-desktop", "k3s"]
    characteristics:
      - "Single-node or lightweight multi-node"
      - "Local storage provisioners"
      - "NodePort or LoadBalancer services"
      - "Simplified networking"

  cloud_native:
    aws:
      services: ["EKS", "ELB", "EBS", "EFS", "ECR", "IAM"]
      patterns: ["ALB Ingress", "EBS CSI", "EFS CSI", "IRSA"]
    azure:
      services:
        [
          "AKS",
          "Application Gateway",
          "Azure Disks",
          "Azure Files",
          "ACR",
          "Azure AD",
        ]
      patterns: ["Application Gateway Ingress", "Azure CSI", "Pod Identity"]
    gcp:
      services:
        [
          "GKE",
          "Cloud Load Balancing",
          "Persistent Disks",
          "Filestore",
          "GCR",
          "Cloud IAM",
        ]
      patterns: ["GCE Ingress", "GCP CSI", "Workload Identity"]

  on_premises:
    components: ["MetalLB", "Local Path Provisioner", "NFS", "LDAP"]
    patterns: ["BGP Load Balancing", "Static Provisioning", "Manual Scaling"]

# Microservices Architecture Patterns
microservices_patterns:
  service_mesh:
    istio:
      components: ["Pilot", "Citadel", "Galley", "Proxy"]
      features: ["Traffic Management", "Security", "Observability"]
    linkerd:
      components: ["Control Plane", "Data Plane"]
      features: ["Automatic mTLS", "Traffic Splitting", "Observability"]
    consul_connect:
      components: ["Consul Server", "Consul Client", "Envoy Proxy"]
      features: ["Service Discovery", "Configuration", "Segmentation"]

  communication_patterns:
    synchronous: ["REST APIs", "GraphQL", "gRPC"]
    asynchronous: ["Message Queues", "Event Streams", "Pub/Sub"]
    hybrid: ["Request-Response with Events", "Saga Patterns"]

  data_patterns:
    database_per_service: ["Isolated Data Stores", "Data Ownership"]
    shared_database: ["Anti-pattern", "Legacy Migration"]
    event_sourcing: ["Event Store", "Projection", "Replay"]
    cqrs: ["Command Query Separation", "Read/Write Optimization"]

# Security Architecture Patterns
security_patterns:
  zero_trust:
    principles: ["Never Trust", "Always Verify", "Assume Breach"]
    implementation:
      ["Network Segmentation", "Identity Verification", "Least Privilege"]

  defense_in_depth:
    layers: ["Network", "Host", "Application", "Data"]
    controls: ["Firewalls", "IDS/IPS", "WAF", "Encryption"]

  pod_security_standards:
    privileged: ["Unrestricted", "Development Only"]
    baseline: ["Minimally Restrictive", "Standard Workloads"]
    restricted: ["Heavily Restricted", "Security-Critical Workloads"]

# CI/CD Pipeline Patterns
cicd_patterns:
  gitops_workflows:
    argocd:
      patterns: ["App of Apps", "ApplicationSets", "Progressive Sync"]
      features: ["Declarative", "Git as Source of Truth", "Automatic Sync"]
    flux:
      patterns: ["GitOps Toolkit", "Multi-Tenancy", "OCI Artifacts"]
      features: ["Source Controller", "Kustomize Controller", "Helm Controller"]

  deployment_strategies:
    blue_green:
      characteristics:
        ["Zero Downtime", "Full Environment Switch", "Easy Rollback"]
      use_cases: ["Critical Applications", "Database Migrations"]
    canary:
      characteristics: ["Gradual Rollout", "Risk Mitigation", "User Feedback"]
      use_cases: ["User-Facing Applications", "A/B Testing"]
    rolling:
      characteristics:
        ["Resource Efficient", "Gradual Replacement", "Partial Rollback"]
      use_cases: ["Standard Applications", "Stateless Services"]

# Monitoring and Observability Patterns
observability_patterns:
  metrics:
    red_method: ["Rate", "Errors", "Duration"]
    use_method: ["Utilization", "Saturation", "Errors"]
    four_golden_signals: ["Latency", "Traffic", "Errors", "Saturation"]

  logging:
    structured: ["JSON Format", "Consistent Fields", "Searchable"]
    correlation: ["Trace IDs", "Request IDs", "User IDs"]
    retention: ["Hot", "Warm", "Cold", "Archive"]

  tracing:
    distributed:
      ["Request Flow", "Service Dependencies", "Performance Bottlenecks"]
    sampling: ["Head-based", "Tail-based", "Adaptive"]
    correlation: ["Logs", "Metrics", "Traces"]

# Final Deliverables with Mandatory Reverse Date Stamps
final_deliverables:
  naming_convention: "MANDATORY: ALL planning output files MUST use reverse date stamp format: YYYY-MM-DD-HHMMSS"
  date_stamp_format: "{{YYYY}}-{{MM}}-{{DD}}-{{HHMMSS}}"
  example_format: "2025-09-24-143000"

  required_outputs:
    - "Implementation_Plan_{{YYYYMMDD-HHMMSS}}.ipynb (implementation plan)"
    - "Testing_Strategy_{{YYYYMMDD-HHMMSS}}.ipynb (testing strategy)"
    - "Integration_Plan_{{YYYYMMDD-HHMMSS}}.ipynb (integration plan)"
    - "Deployment_Plan_{{YYYYMMDD-HHMMSS}}.ipynb (deployment plan)"

  date_stamp_requirements:
    - "MANDATORY: Use current UTC timestamp for all planning output files"
    - "MANDATORY: Format as YYYY-MM-DD-HHMMSS (reverse chronological order)"
    - "MANDATORY: Include date stamp in ALL planning deliverable filenames"
    - "MANDATORY: Use consistent date stamp across all planning outputs"
    - "FORBIDDEN: Creating planning files without proper date stamps"
    - "FORBIDDEN: Using different date formats within same planning session"

# Planning Execution Workflow with Mandatory Structure Compliance
execution_steps:
  - "1. VALIDATE target application ({{target_application}}) and architecture type ({{architecture_type}})"
  - "2. ANALYZE target platforms ({{target_platforms}}) for universal compatibility"
  - "3. CREATE mandatory directory structure according to DEPLOYMENT-STRUCTURE.md"
  - "4. DESIGN application-specific structure within mandatory framework"
  - "5. PLAN microservices architecture patterns and service mesh integration"
  - "6. DESIGN security-first architecture with Pod Security Standards"
  - "7. ARCHITECT CI/CD pipeline with GitOps integration"
  - "8. DESIGN comprehensive monitoring and observability stack"
  - "9. PLAN scalability and performance optimization strategies"
  - "10. DESIGN disaster recovery and business continuity procedures"
  - "11. ANALYZE cost optimization and resource efficiency"
  - "12. GENERATE comprehensive planning documentation with timestamps"
  - "13. VALIDATE planning completeness against mandatory requirements"
  - "14. CREATE implementation roadmap with phase-by-phase guidance"

date_stamp_execution_requirements:
  - "MANDATORY: Record precise timestamps for each planning step"
  - "MANDATORY: Use UTC time for all timestamp recordings"
  - "MANDATORY: Include timestamps in all planning tracking"
  - "MANDATORY: Timestamp all planning deliverable creation"
  - "FORBIDDEN: Proceeding without proper timestamp documentation"

# Mandatory Success Criteria
success_criteria:
  - "MANDATORY: Complete universal platform compatibility analysis"
  - "MANDATORY: Full compliance with DEPLOYMENT-STRUCTURE.md"
  - "MANDATORY: Comprehensive microservices architecture design"
  - "MANDATORY: Security-first approach with Pod Security Standards"
  - "MANDATORY: Complete CI/CD pipeline architecture"
  - "MANDATORY: Comprehensive monitoring and observability design"
  - "MANDATORY: Detailed scalability and performance planning"
  - "MANDATORY: Complete disaster recovery and business continuity planning"
  - "MANDATORY: Thorough cost optimization analysis"
  - "MANDATORY: All deliverables created with proper timestamps"
  - "MANDATORY: Clear implementation roadmap provided"

# Constraints and Requirements
constraints:
  mandatory_requirements:
    - "ALL planning MUST strictly follow DEPLOYMENT-STRUCTURE.md"
    - "ALL applications MUST support universal platform deployment"
    - "ALL architectures MUST follow microservices best practices"
    - "ALL plans MUST prioritize security-first approach"
    - "ALL designs MUST integrate with CI/CD pipelines"
    - "ALL plans MUST include comprehensive monitoring"
    - "ALL strategies MUST consider cost optimization"
    - "ALL documentation MUST be production-ready"
    - "ALWAYS use KISS principles for simplicity"
    - "NEVER deviate from mandatory structure without justification"

  strictly_forbidden:
    - "Executing actual deployment commands"
    - "Making changes to live systems"
    - "Deviating from mandatory directory structure"
    - "Partial or incomplete planning"
    - "Skipping security or compliance planning"
    - "Creating plans without universal platform support"
    - "Missing monitoring and observability planning"
    - "Proceeding without cost optimization analysis"
    - "Creating documentation without proper timestamps"
    - "Planning without considering scalability requirements"

---
