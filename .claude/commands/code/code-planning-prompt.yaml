# === MCP PROMPT: Code Planning Protocol ===
name: "code-planning-prompt"
version: "1.0.0"
description: "AI-driven exhaustive implementation blueprint protocol for production code development planning"

# MCP Prompt Metadata
mcp_prompt:
  title: "Code Planning"
  description: "Create comprehensive implementation plans following SOLID, DRY, and KISS principles with code reuse analysis and validation workflows"

  # Argument Schema
  arguments:
    planning_target:
      type: "string"
      description: "Target for planning (feature, bugfix, optimization, etc.)"
      required: true

    planning_scope:
      type: "string"
      description: "Scope of planning"
      required: false
      enum:
        [
          "comprehensive",
          "feature-specific",
          "bugfix",
          "optimization",
          "refactoring",
          "architecture",
          "integration",
          "security",
          "performance",
        ]

    existing_codebase:
      type: "string"
      description: "Path to existing codebase for reuse analysis"
      required: false

    complexity_level:
      type: "string"
      description: "Complexity level of the planned implementation"
      required: false
      enum: ["simple", "moderate", "complex", "enterprise"]

    validation_requirements:
      type: "string"
      description: "Level of validation planning required"
      required: false
      enum: ["standard", "comprehensive", "strict", "continuous"]

    deployment_target:
      type: "string"
      description: "Target deployment environment"
      required: false
      enum: ["local", "dev", "staging", "production", "multi-env"]

# MCP Message Structure
messages:
  - role: "system"
    content:
      type: "text"
      text: |
        You are an AI planning specialist executing the Code Planning Protocol.

        MANDATORY REQUIREMENTS:
        - Use thinking before every action
        - Follow exhaustive planning methodology
        - Create production-ready implementation plans
        - Apply SOLID, DRY, KISS principles to architecture
        - Scan existing codebase for reuse opportunities
        - Plan comprehensive debug logging strategy
        - Design complete validation workflows
        - Plan in-place modifications only (no duplicates)

        ABSOLUTELY FORBIDDEN:
        - Planning test implementation (separate task)
        - Planning external documentation
        - Creating duplicate files or backup copies
        - Planning complex solutions when simple exists
        - Skipping validation workflow planning
        - Ignoring existing code reuse opportunities

  - role: "user"
    content:
      type: "text"
      text: |
        **MANDATORY CODE PLANNING PROTOCOL EXECUTION**

        **ALWAYS THINK THEN...** Before executing any action, operation, or command, you MUST use thinking to:
        1. Analyze the request and understand what needs to be done
        2. Plan your approach and identify potential issues
        3. Consider the implications and requirements
        4. Only then proceed with the actual execution

        **PLANNING PARAMETERS:**
        - Planning Target: {{planning_target}}
        - Planning Scope: {{planning_scope}}
        - Existing Codebase: {{existing_codebase}}
        - Complexity Level: {{complexity_level}}
        - Validation Requirements: {{validation_requirements}}
        - Deployment Target: {{deployment_target}}

        **MANDATORY PROTOCOL COMPLIANCE:**
        YOU MUST ALWAYS read and execute the ai-agent-compliance-prompt.md protocol before proceeding.

        **EXECUTE THE FOLLOWING PLANNING PROTOCOL:**

# Planning Protocol Configuration
planning_protocol:
  # Planning Scope - MANDATORY EXHAUSTIVE COVERAGE
  planning_focus:
    production_code_only: true # MUST plan ONLY production code
    complete_solution: true # MUST plan entire solution
    code_reuse_analysis: true # MUST scan for existing code
    debug_logging_plan: true # MUST plan comprehensive logging
    validation_workflow: true # MUST plan build/deploy/check
    no_test_planning: true # FORBIDDEN: Test planning here
    no_doc_planning: true # FORBIDDEN: Doc planning here
    plan_in_place_fixes: true # MUST plan in-place modifications
    no_duplicate_files: true # FORBIDDEN: Planning duplicate files

  # Planning Requirements - MANDATORY SETTINGS
  planning_requirements:
    scan_existing_code: true # MANDATORY: Find reusable code
    follow_solid_principles: true # MANDATORY: SOLID architecture
    apply_dry_principle: true # MANDATORY: Plan deduplication
    implement_kiss_principle: true # MANDATORY: Simple solutions
    plan_debug_logging: true # MANDATORY: Logging strategy
    plan_validation_steps: true # MANDATORY: Validation workflow
    pre_validation_checks: true # MANDATORY: Quality gates

  # Validation Planning
  validation_planning:
    lint_before_validation: true # MANDATORY: Linting checks
    typecheck_before_validation: true # MANDATORY: Type validation
    complexity_check: true # MANDATORY: Complexity limits
    duplication_check: true # MANDATORY: No duplicates
    build_after_validation: true # MANDATORY: Build validation
    deploy_after_build: true # MANDATORY: Deploy to test
    log_check_after_deploy: true # MANDATORY: Log validation

# Execution Instructions
execution_phases:
  phase_1:
    name: "Requirements Analysis and Code Reuse Discovery"
    mandatory_actions:
      - "PARSE ALL functional requirements"
      - "IDENTIFY ALL technical needs"
      - "SCAN existing codebase for reusable components"
      - "MAP potential code duplicates"
      - "DEFINE success criteria"
      - "PLAN code reuse strategy"

    requirements_analysis:
      functional_analysis:
        - "PARSE ALL functional requirements"
        - "IDENTIFY ALL technical needs"
        - "MAP ALL dependencies"
        - "LIST ALL constraints"
        - "DEFINE ALL success criteria"
        - "DOUBLE-CHECK nothing missed"

      codebase_analysis:
        - "SCAN ALL existing modules"
        - "FIND ALL reusable components"
        - "IDENTIFY ALL similar patterns"
        - "MAP ALL potential duplicates"
        - "LIST ALL utility functions"
        - "MANDATORY: Reuse over create"

      code_reuse_planning:
        - "DOCUMENT found components"
        - "PLAN integration approach"
        - "MAP required adaptations"
        - "IDENTIFY extension points"
        - "PLAN refactoring needs"
        - "FORBIDDEN: Duplicate existing code"

      codebase_hygiene:
        - "FORBIDDEN: plan duplicate files"
        - "FORBIDDEN: plan backup copies"
        - "FORBIDDEN: plan alternative versions"
        - "ALWAYS plan in-place modifications"
        - "ALWAYS plan clean codebase"
        - "MANDATORY: Plan direct fixes only"

  phase_2:
    name: "Architecture Design with SOLID Principles"
    mandatory_actions:
      - "DESIGN component architecture following SOLID"
      - "PLAN single responsibilities for each component"
      - "DESIGN for extension without modification"
      - "ENSURE substitutability in inheritance"
      - "DEFINE minimal specific interfaces"
      - "PLAN dependency injection patterns"

    solid_architecture:
      single_responsibility:
        - "PLAN one responsibility per class"
        - "SEPARATE concerns clearly"
        - "AVOID mixed responsibilities"
        - "ENSURE focused components"
        - "PLAN cohesive modules"

      open_closed:
        - "DESIGN for extension"
        - "CLOSE for modification"
        - "USE abstraction layers"
        - "PLAN plugin architectures"
        - "ENABLE feature additions"

      liskov_substitution:
        - "ENSURE proper inheritance"
        - "MAINTAIN behavioral compatibility"
        - "AVOID breaking contracts"
        - "PLAN proper hierarchies"
        - "VALIDATE substitutability"

      interface_segregation:
        - "CREATE specific interfaces"
        - "AVOID fat interfaces"
        - "PLAN role-based interfaces"
        - "MINIMIZE dependencies"
        - "ENSURE client-specific contracts"

      dependency_inversion:
        - "DEPEND on abstractions"
        - "AVOID concrete dependencies"
        - "PLAN injection patterns"
        - "USE interface contracts"
        - "ENABLE loose coupling"

    dry_kiss_enforcement:
      - "IDENTIFY common patterns"
      - "PLAN shared utilities"
      - "DESIGN simple solutions"
      - "AVOID over-engineering"
      - "PLAN code consolidation"
      - "DOUBLE-CHECK no duplication"

  phase_3:
    name: "Debug Logging Strategy Planning"
    mandatory_actions:
      - "PLAN comprehensive logging points"
      - "DESIGN structured logging format"
      - "CREATE correlation ID strategy"
      - "PLAN performance metrics logging"
      - "DESIGN security event logging"
      - "ESTABLISH log level hierarchy"

    logging_strategy:
      logging_points:
        - "PLAN entry/exit logging"
        - "DESIGN parameter logging"
        - "CREATE state change logging"
        - "PLAN decision point logging"
        - "DESIGN error detail logging"

      log_levels:
        - "DEBUG for development details"
        - "INFO for operational events"
        - "WARN for potential issues"
        - "ERROR for failure events"
        - "FATAL for system crashes"

      structured_logging:
        - "DESIGN consistent format"
        - "PLAN correlation IDs"
        - "INCLUDE context information"
        - "ADD performance metrics"
        - "CAPTURE security events"

  phase_4:
    name: "Technical Design and Data Architecture"
    mandatory_actions:
      - "DESIGN ALL components and interfaces"
      - "PLAN ALL data models and relationships"
      - "CREATE ALL API contracts"
      - "DESIGN ALL error handling strategies"
      - "PLAN ALL integration points"
      - "MAP ALL data flows"

    component_design:
      architecture_planning:
        - "DESIGN ALL components"
        - "DEFINE ALL interfaces"
        - "PLAN ALL interactions"
        - "MAP ALL data flows"
        - "DESIGN ALL error handling"
        - "MANDATORY: Production-ready"

      data_modeling:
        - "PLAN ALL entities"
        - "DEFINE ALL relationships"
        - "DESIGN ALL validations"
        - "PLAN ALL migrations"
        - "MAP ALL transformations"
        - "FORBIDDEN: Unvalidated data"

      api_design:
        - "CREATE REST/GraphQL contracts"
        - "DEFINE request/response schemas"
        - "PLAN authentication/authorization"
        - "DESIGN error responses"
        - "DOCUMENT API versioning"

  phase_5:
    name: "Implementation Blueprint Creation"
    mandatory_actions:
      - "CREATE detailed task breakdown"
      - "ORDER ALL implementation tasks"
      - "DEFINE ALL task dependencies"
      - "PLAN ALL integration points"
      - "SCHEDULE ALL validation checkpoints"
      - "MAP ALL deployment steps"

    implementation_planning:
      task_breakdown:
        - "ORDER ALL tasks logically"
        - "DEFINE ALL dependencies"
        - "PLAN ALL integrations"
        - "SCHEDULE ALL validations"
        - "MAP ALL checkpoints"
        - "MANDATORY: Complete coverage"

      code_templates:
        - "CREATE component templates"
        - "DESIGN API templates"
        - "PLAN service templates"
        - "DEFINE utility templates"
        - "BUILD integration templates"

      validation_checkpoints:
        - "PLAN pre-commit checks"
        - "DESIGN build validation"
        - "CREATE deployment tests"
        - "PLAN smoke tests"
        - "DESIGN health checks"

  phase_6:
    name: "Validation Workflow Design"
    mandatory_actions:
      - "PLAN pre-validation quality gates"
      - "DESIGN continuous validation workflow"
      - "CREATE build and deployment pipeline"
      - "PLAN log monitoring strategy"
      - "DESIGN rollback procedures"
      - "ESTABLISH success criteria"

    pre_validation:
      code_scanning:
        - "PLAN duplication checks"
        - "DESIGN complexity analysis"
        - "CREATE linting validation"
        - "PLAN type checking"
        - "DESIGN security scanning"

      quality_gates:
        - "ALL checks must pass"
        - "FIX before deployment"
        - "NO warnings allowed"
        - "CLEAN code only"
        - "PRODUCTION standards"

    continuous_validation:
      build_deploy_pipeline:
        - "AUTOMATIC build trigger"
        - "BUILD success validation"
        - "DEPLOY to test environment"
        - "HEALTH check verification"
        - "LOG monitoring setup"
        - "MANDATORY: Full pipeline"

      log_validation:
        - "CONTAINER log checks"
        - "APPLICATION log review"
        - "ERROR pattern search"
        - "PERFORMANCE monitoring"
        - "SECURITY audit"
        - "DOUBLE-CHECK all clean"

  phase_7:
    name: "Code Quality and Maintenance Planning"
    mandatory_actions:
      - "ESTABLISH code quality standards"
      - "PLAN maintenance procedures"
      - "DESIGN monitoring and alerting"
      - "CREATE performance tracking"
      - "PLAN technical debt prevention"
      - "DESIGN update procedures"

    quality_standards:
      code_conventions:
        - "NAMING conventions"
        - "FILE organization"
        - "MODULE structure"
        - "IMPORT ordering"
        - "COMMENT standards"
        - "MANDATORY: Consistency"

      maintenance_planning:
        - "MONITORING setup"
        - "ALERT configuration"
        - "LOG retention"
        - "PERFORMANCE tracking"
        - "UPDATE procedures"
        - "FORBIDDEN: Unmaintainable code"

      technical_debt_prevention:
        - "CLEAN code practices"
        - "REGULAR refactoring"
        - "DEPENDENCY updates"
        - "SECURITY patches"
        - "PERFORMANCE tuning"
        - "MANDATORY: Zero debt"

  phase_8:
    name: "Deployment and Operational Planning"
    mandatory_actions:
      - "PLAN build configuration"
      - "DESIGN deployment strategy"
      - "CREATE monitoring and observability"
      - "PLAN rollback procedures"
      - "DESIGN scaling strategy"
      - "ESTABLISH operational runbooks"

    deployment_planning:
      build_configuration:
        - "BUILD configuration"
        - "ENVIRONMENT setup"
        - "SECRET management"
        - "RESOURCE allocation"
        - "SCALING strategy"
        - "MANDATORY: Zero downtime"

      operational_readiness:
        - "HEALTH checks"
        - "MONITORING setup"
        - "LOG aggregation"
        - "ALERT rules"
        - "RUNBOOK creation"
        - "DOUBLE-CHECK fully observable"

      rollback_planning:
        - "ROLLBACK triggers"
        - "DATA migration rollback"
        - "SERVICE restoration"
        - "COMMUNICATION plan"
        - "POST-MORTEM process"
        - "MANDATORY: Safe rollback"

# Planning Deliverables
planning_deliverables:
  code_templates:
    component_template:
      structure: "SOLID-compliant class/module"
      logging: "Debug logging at all key points"
      error_handling: "Comprehensive try-catch"
      validation: "Input/output validation"

    api_template:
      structure: "RESTful/GraphQL endpoint"
      logging: "Request/response logging"
      authentication: "Proper auth checks"
      documentation: "OpenAPI/GraphQL schema"

    service_template:
      structure: "Microservice pattern"
      logging: "Distributed tracing"
      resilience: "Circuit breakers"
      monitoring: "Health endpoints"

# Validation Matrices
validation_matrices:
  planning_completeness:
    structure: |
      | Aspect | Planned | Existing Code | Reuse Strategy | Validated | Status |
      |--------|---------|---------------|----------------|-----------|--------|
      | User API | [X] | Found 3 | Extend base | [X] | READY |

  pre_validation_checklist:
    structure: |
      | Check | Tool | Threshold | Automated | Blocking | Status |
      |-------|------|-----------|-----------|----------|--------|
      | Lint | ESLint | 0 errors | [X] | [X] | CONFIGURED |

  validation_workflow:
    structure: |
      | Stage | Action | Success Criteria | Rollback | Automated | Status |
      |-------|--------|------------------|----------|-----------|--------|
      | Build | Build | No errors | Restore | [X] | PLANNED |

# Final Deliverables with Mandatory Reverse Date Stamps
final_deliverables:
  naming_convention: "MANDATORY: ALL planning output files MUST use reverse date stamp format: YYYY-MM-DD-HHMMSS"
  date_stamp_format: "{{YYYY}}-{{MM}}-{{DD}}-{{HHMMSS}}"
  example_format: "2025-09-22-142155"

  required_outputs:
    - "Implementation_Plan_{{YYYYMMDD-HHMMSS}}.ipynb (implementation plan)"
    - "Testing_Strategy_{{YYYYMMDD-HHMMSS}}.ipynb (testing strategy)"
    - "Integration_Plan_{{YYYYMMDD-HHMMSS}}.ipynb (integration plan)"
    - "Deployment_Plan_{{YYYYMMDD-HHMMSS}}.ipynb (deployment plan)"

  date_stamp_requirements:
    - "MANDATORY: Use current UTC timestamp for all planning output files"
    - "MANDATORY: Format as YYYY-MM-DD-HHMMSS (reverse chronological order)"
    - "MANDATORY: Include date stamp in ALL planning deliverable filenames"
    - "MANDATORY: Use consistent date stamp across all outputs"
    - "FORBIDDEN: Creating planning files without proper date stamps"
    - "FORBIDDEN: Using different date formats within same planning session"

# Planning Execution Workflow
execution_steps:
  - "1. ANALYZE requirements and scan existing codebase ({{planning_target}})"
  - "2. IDENTIFY reusable components and patterns"
  - "3. DESIGN architecture following SOLID principles"
  - "4. PLAN debug logging strategy comprehensively"
  - "5. CREATE detailed technical design"
  - "6. BUILD implementation blueprint with tasks"
  - "7. DESIGN validation workflow and quality gates"
  - "8. PLAN code quality and maintenance procedures"
  - "9. CREATE deployment and operational plans"
  - "10. VALIDATE planning completeness"
  - "11. GENERATE planning documentation with timestamps"
  - "12. ENSURE all reuse opportunities identified"
  - "13. CONFIRM validation workflow complete"
  - "14. DELIVER comprehensive planning blueprints"

# Codebase Hygiene Planning
codebase_hygiene:
  always_required:
    - "ALWAYS plan in-place fixes"
    - "PLAN direct modifications"
    - "PLAN clean codebase"
    - "MAINTAIN code integrity"
    - "PREVENT code duplication"

  strictly_forbidden:
    - "FORBIDDEN: plan duplicate files"
    - "FORBIDDEN: plan backup copies"
    - "FORBIDDEN: plan alternative versions"
    - "NO planning file_v2.py"
    - "NO planning file.py.new"
    - "NO planning temporary files"

# Constraints and Requirements
constraints:
  mandatory_requirements:
    - "MUST scan existing code before planning"
    - "MUST plan for code reuse"
    - "MUST include debug logging"
    - "MUST plan validation workflow"
    - "MUST check logs after deploy"
    - "Documentation in Jupyter only"
    - "Plan in-place modifications only"
    - "NEVER plan duplicate files or copies"

  strictly_forbidden:
    - "Planning test implementation"
    - "Planning external documentation"
    - "Duplicating existing code"
    - "Skipping validation steps"
    - "Complex over simple solutions"
    - "Planning duplicate code blocks/files"
    - "Planning backup copies of files"
    - "Planning alternative implementations"