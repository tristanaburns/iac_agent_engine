# === MCP PROMPT: Universal Code Debugging Protocol ===
name: "code-debug-prompt"
version: "1.0.0"
description: "AI-driven exhaustive issue resolution protocol for production code debugging"

# MCP Prompt Metadata
mcp_prompt:
  title: "Code Debugging Prompt"
  description: "Execute exhaustive and comprehensive debugging of all production code issues with mandatory resolution"

  # Argument Schema
  arguments:
    issue_type:
      type: "string"
      description: "Type of issue to debug"
      required: true
      enum:
        [
          "runtime",
          "logic",
          "performance",
          "security",
          "concurrency",
          "integration",
          "all",
        ]

    severity:
      type: "string"
      description: "Issue severity level"
      required: true
      enum: ["critical", "high", "medium", "low"]

    codebase_path:
      type: "string"
      description: "Path to codebase or specific component"
      required: true

    error_logs:
      type: "string"
      description: "Error logs or stack traces"
      required: false

    reproduction_steps:
      type: "string"
      description: "Steps to reproduce the issue"
      required: false

    affected_components:
      type: "string"
      description: "List of affected components or services"
      required: false

# MCP Message Structure
messages:
  - role: "system"
    content:
      type: "text"
      text: |
        You are an AI debugging specialist executing the Universal Code Debugging Protocol.

        MANDATORY REQUIREMENTS:
        - Use thinking before every action
        - Follow exhaustive debugging methodology
        - Implement complete fixes only (NO workarounds)
        - Maintain production-ready code standards
        - Use atomic git commits
        - Follow SOLID, DRY, KISS principles

        ABSOLUTELY FORBIDDEN:
        - Creating custom remediation scripts
        - Partial fixes or workarounds
        - Mocking, stubs, or placeholder code
        - Duplicate files or backup copies
        - Technical debt or deferred fixes

  - role: "user"
    content:
      type: "text"
      text: |
        **MANDATORY DEBUGGING PROTOCOL EXECUTION**

        **ALWAYS THINK THEN...** Before executing any action, operation, or command, you MUST use thinking to:
        1. Analyze the request and understand what needs to be done
        2. Plan your approach and identify potential issues
        3. Consider the implications and requirements
        4. Only then proceed with the actual execution

        **ISSUE DETAILS:**
        - Issue Type: {{issue_type}}
        - Severity: {{severity}}
        - Codebase: {{codebase_path}}
        - Error Logs: {{error_logs}}
        - Reproduction Steps: {{reproduction_steps}}
        - Affected Components: {{affected_components}}

        **MANDATORY PROTOCOL COMPLIANCE:**
        YOU MUST ALWAYS read and execute the ai-agent-compliance-prompt.md protocol before proceeding.

        **EXECUTE THE FOLLOWING DEBUGGING PROTOCOL:**

# Debugging Protocol Configuration
debugging_protocol:
  # Input Requirements with Date Stamp Validation
  prerequisite_inputs:
    code_review_report: "Code_Review_Analysis-{{YYYY-MM-DD-HHMMSS}}.ipynb"
    gap_analysis_report: "Gap_Analysis_Report-{{YYYY-MM-DD-HHMMSS}}.ipynb"
    fault_matrix: "From code review Section 1"
    error_logs: "Application logs, crash reports"
    user_reports: "Bug reports, issue tickets"
    test_results: "Live API test results"

    input_validation:
      - "MANDATORY: Verify all input files have proper reverse date stamps"
      - "MANDATORY: Use most recent versions of analysis reports"
      - "MANDATORY: Check file timestamps for currency"
      - "FORBIDDEN: Using outdated analysis files without date stamps"

  # Debugging Scope - MANDATORY EXHAUSTIVE COVERAGE
  debugging_focus:
    runtime_errors: true # MUST fix all crashes, exceptions, panics
    logic_errors: true # MUST fix all incorrect behavior
    performance_issues: true # MUST resolve all performance problems
    concurrency_problems: true # MUST fix all race conditions, deadlocks
    integration_failures: true # MUST fix all API/connectivity issues
    security_vulnerabilities: true # MUST fix all security exposures
    edge_case_failures: true # MUST handle all boundary conditions
    intermittent_issues: true # MUST resolve all flaky behaviors
    production_code_only: true # STRICTLY production code issues only
    fix_in_place: true # MUST fix existing code in-place
    no_duplicate_files: true # FORBIDDEN: Creating duplicate files

  # Debugging Configuration - MANDATORY SETTINGS
  debug_settings:
    enable_verbose_logging: true
    capture_memory_dumps: true
    profile_performance: true
    trace_execution_flow: true
    monitor_resource_usage: true
    track_state_changes: true
    fix_all_issues: true # MANDATORY: All issues must be fixed
    no_workarounds: true # FORBIDDEN: No shortcuts or bypasses
    atomic_commits: true # MANDATORY: Git atomic commits
    follow_principles: true # MANDATORY: SOLID, DRY, KISS
    continuous_log_monitoring: true # MANDATORY: Check logs throughout process
    double_check_logs: true # MANDATORY: Always verify log findings

# Execution Instructions
execution_phases:
  phase_1:
    name: "Issue Triage and Prioritization with Log Analysis"
    mandatory_actions:
      - "CHECK ALL LOGS before starting: Container logs, Application logs, System logs, Service logs, Error logs"
      - "DOUBLE-CHECK: Review logs again for missed issues"
      - "Analyze all reported issues from code review fault matrix, gap analysis findings, error logs"
      - "Categorize issues by Severity, Frequency, Impact, Scope, Log evidence"
      - "Create debugging priority queue: Critical security  Data corruption  System crashes  Functional issues  Performance  UI/UX"

    critical_hygiene_rules:
      - "FORBIDDEN: create duplicate debug files"
      - "FORBIDDEN: create alternative versions"
      - "FORBIDDEN: make backup copies for debugging"
      - "ALWAYS fix existing code in-place"
      - "ALWAYS maintain clean repository"
      - "MANDATORY: Fix production code directly"

  phase_2:
    name: "Exhaustive Systematic Investigation"
    mandatory_actions:
      - "For EVERY issue discovered, perform complete log analysis"
      - "Complete issue reproduction with log monitoring"
      - "Comprehensive root cause analysis using log evidence"
      - "Full impact assessment via logs"
      - "FORBIDDEN: Skipping hard-to-reproduce issues"

    investigation_techniques:
      runtime_errors:
        - "Stack trace analysis FROM LOGS"
        - "Exception chain investigation IN LOGS"
        - "Memory dump examination WITH LOG CORRELATION"
        - "DOUBLE-CHECK: Container logs for context"

      logic_errors:
        - "Input/output comparison WITH LOG TRACES"
        - "State machine validation VIA LOGS"
        - "Algorithm step-through WITH LOG OUTPUT"
        - "DOUBLE-CHECK: Service interaction logs"

      performance_issues:
        - "CPU profiling WITH LOG TIMESTAMPS"
        - "Memory profiling WITH LOG CORRELATION"
        - "I/O analysis VIA SYSTEM LOGS"
        - "DOUBLE-CHECK: Performance metric logs"

      security_vulnerabilities:
        - "Input fuzzing WITH SECURITY LOGS"
        - "Injection testing WITH AUDIT LOGS"
        - "Authentication bypass attempts IN AUTH LOGS"
        - "DOUBLE-CHECK: All security event logs"

  phase_3:
    name: "Comprehensive Fix Implementation"
    mandatory_actions:
      - "Complete hypothesis formation based on ALL symptoms and evidence"
      - "Exhaustive hypothesis testing with comprehensive logging"
      - "Production-grade fix development following SOLID, DRY, KISS principles"
      - "FORBIDDEN: Partial fixes or workarounds"

    production_debugging_patterns:
      logging_strategy:
        - "Complete debug log coverage"
        - "Structured logging format"
        - "Full correlation tracking"
        - "MANDATORY: Log all operations"
        - "MANDATORY: Check container logs continuously"

      state_debugging:
        - "Full record and replay WITH LOGS"
        - "Complete state snapshots IN LOGS"
        - "MANDATORY: Track all state changes IN LOGS"
        - "DOUBLE-CHECK: Cross-reference all log sources"

    git_commit_practices:
      - "MANDATORY: Atomic commits only"
      - "MANDATORY: One fix per commit"
      - "MANDATORY: Descriptive commit messages"
      - "FORBIDDEN: Large multi-fix commits"

  phase_4:
    name: "Exhaustive Fix Verification with Log Validation"
    mandatory_actions:
      - "Complete testing of ALL fixes with log monitoring"
      - "Verify ALL fixes completely resolve issues VIA LOGS"
      - "Check for ANY regression IN ALL LOGS"
      - "Test ALL edge cases WITH LOG VERIFICATION"
      - "MANDATORY: Monitor container logs during ALL tests"
      - "FORBIDDEN: Skipping any test scenarios"

    validation_requirements:
      - "MANDATORY: Create comprehensive unit tests WITH LOGGING"
      - "MANDATORY: Update all integration tests WITH LOG CHECKS"
      - "MANDATORY: Full regression test suite WITH LOG ANALYSIS"
      - "MANDATORY: Complete performance benchmarks FROM LOGS"
      - "MANDATORY: Exhaustive security scanning WITH AUDIT LOGS"
      - "FORBIDDEN: Partial test coverage"

  phase_5:
    name: "Complete Prevention and Production Deployment"
    mandatory_actions:
      - "Implement comprehensive preventive measures"
      - "Add ALL necessary assertions and invariants"
      - "Implement complete error handling"
      - "Enhance ALL logging points"
      - "MANDATORY: Prevent future occurrences"
      - "FORBIDDEN: Leaving gaps in prevention"

    documentation_requirements:
      - "Document ALL root causes"
      - "Explain ALL fix implementations"
      - "Create complete troubleshooting guides"
      - "Update ALL runbooks"
      - "MANDATORY: Production deployment guides"
      - "FORBIDDEN: Incomplete documentation"

# Debugging Tools and Techniques
debugging_tools:
  general_purpose:
    - "IDE debuggers (breakpoints, watches, step-through)"
    - "Command-line debuggers (gdb, lldb, delve)"
    - "Memory analyzers (Valgrind, AddressSanitizer)"
    - "Profilers (perf, VTune, instruments)"

  language_specific:
    python:
      - "pdb, ipdb (interactive debugging)"
      - "py-spy (sampling profiler)"
      - "memory_profiler (memory usage)"
      - "tracemalloc (memory allocations)"

    javascript:
      - "Chrome DevTools"
      - "Node.js inspector"
      - "Performance profiler"
      - "Memory heap snapshots"

    go:
      - "Delve debugger"
      - "pprof (CPU/memory profiling)"
      - "race detector"
      - "trace tool"

# Systematic Debugging Approaches
systematic_approaches:
  divide_and_conquer:
    when: "Large codebase, unclear error location"
    how: "Binary search through code, disable half functionality"
    tools: "Feature flags, conditional compilation"

  time_travel_debugging:
    when: "Intermittent issues, state-dependent bugs"
    how: "Record execution, replay with inspection"
    tools: "rr, WinDbg TTD, Chrome DevTools"

  statistical_debugging:
    when: "Rare, hard-to-reproduce bugs"
    how: "Collect execution profiles, analyze patterns"
    tools: "Coverage tools, profilers, APM"

# Constraints and Requirements
constraints:
  mandatory_requirements:
    - "ALL debugging MUST be exhaustive and complete"
    - "ALL issues MUST be fixed in production code"
    - "Root cause MUST be identified for EVERY issue"
    - "ALL fixes MUST follow SOLID, DRY, KISS principles"
    - "ALL fixes MUST include comprehensive tests"
    - "Performance impact MUST be validated"
    - "Security implications MUST be resolved"
    - "Documentation MUST be complete"
    - "Git commits MUST be atomic"
    - "ALWAYS fix existing code in-place"
    - "NEVER create duplicate files or copies"

  strictly_forbidden:
    - "Creating workarounds or shortcuts"
    - "Bypassing or circumventing issues"
    - "Simple scripts that don't fix root causes"
    - "Leaving any issue unresolved"
    - "Technical debt or deferred fixes"
    - "Partial or incomplete solutions"
    - "Creating duplicate debug files"
    - "Making backup copies of code"
    - "Creating alternative implementations"

# Output Format Requirements
output_format:
  jupyter_structure:
    - "Section 1: Issue Summary and Triage Results"
    - "Section 2: Debugging Plan and Methodology"
    - "Section 3: Issue Investigation Logs"
    - "Section 4: Root Cause Analysis"
    - "Section 5: Reproduction Procedures"
    - "Section 6: Debug Session Transcripts"
    - "Section 7: Fix Implementation Details"
    - "Section 8: Before/After Behavior Comparison"
    - "Section 9: Test Case Development"
    - "Section 10: Performance Impact Analysis"
    - "Section 11: Security Implications"
    - "Section 12: Regression Prevention Measures"
    - "Section 13: Monitoring and Alerting Setup"
    - "Section 14: Troubleshooting Documentation"
    - "Section 15: Lessons Learned and Best Practices"

# Issue Investigation Template with Mandatory Date Stamps
issue_investigation_format: |
  Debug ID: <DBG-{{issue_type}}-{{YYYY-MM-DD-HHMMSS}}-001>
  Session Date: {{YYYY-MM-DD-HHMMSS}}
  Investigation Timestamp: {{YYYY-MM-DD-HHMMSS}}
  Related Gap IDs: [GAP-XXX-{{YYYY-MM-DD}}-001]
  Related Review Findings: [Finding IDs with date stamps]

  Issue Summary:
    Brief description of the problem

  Symptoms:
    - Observable behavior
    - Error messages
    - Performance metrics

  Reproduction Steps:
    1. Step-by-step instructions
    2. Required environment setup
    3. Expected vs. actual behavior

  Investigation Log:
    - {{YYYY-MM-DD-HHMMSS}}: Action taken
    - {{YYYY-MM-DD-HHMMSS}}: Discovery/observation
    - {{YYYY-MM-DD-HHMMSS}}: Hypothesis formed
    - {{YYYY-MM-DD-HHMMSS}}: Log analysis performed
    - {{YYYY-MM-DD-HHMMSS}}: Root cause identified
    - {{YYYY-MM-DD-HHMMSS}}: Fix implemented
    - {{YYYY-MM-DD-HHMMSS}}: Logs double-checked

    timestamp_requirements:
      - "MANDATORY: Use reverse date stamp format YYYY-MM-DD-HHMMSS for all log entries"
      - "MANDATORY: Include precise timestamps for all investigation steps"
      - "MANDATORY: Maintain chronological order in investigation logs"
      - "FORBIDDEN: Using relative timestamps or vague time references"

  Log Evidence:
    - Container Logs: [relevant excerpts]
    - Application Logs: [debug traces]
    - Service Logs: [interaction logs]
    - Error Patterns: [repeated errors]
    - Performance Logs: [metrics]
    - DOUBLE-CHECK: All logs reviewed

  Root Cause:
    MANDATORY: Complete explanation of true root cause
    MANDATORY: Supported by log evidence
    FORBIDDEN: Symptom-level explanations

  Code Analysis:
    ```{{language}}
    // Problematic production code with detailed annotations
    // MANDATORY: Show all affected code paths
    // LOG EVIDENCE: Include relevant log lines
    ```

  Fix Applied:
    ```{{language}}
    // Complete production-ready fix
    // MANDATORY: Following SOLID, DRY, KISS principles
    // MANDATORY: Enhanced logging added
    // FORBIDDEN: Workarounds or partial fixes
    ```

  Git Commit:
    - Commit Hash: [atomic commit hash]
    - Message: "fix: [component] resolve [specific issue]"
    - Files Changed: [list of files]
    - Tests Added: [test files]

  Verification:
    - [X] Issue completely resolved
    - [X] All tests comprehensive and passing
    - [X] No performance regression
    - [X] No security issues
    - [X] Production deployment ready
    - [X] Monitoring in place
    - [X] Documentation complete

  Prevention Measures:
    - Added comprehensive tests: [all test names]
    - Added complete monitoring: [all metrics/alerts]
    - Documentation fully updated: [all docs]
    - Deployment procedures: [CI/CD updates]

# Priority Calculation Matrix
priority_matrix:
  formula: "(Severity * Frequency * Impact) / Effort"

  severity_scores:
    critical: 4 # System crash, data loss
    high: 3 # Major functionality broken
    medium: 2 # Minor functionality affected
    low: 1 # Cosmetic issues

  frequency_scores:
    always: 4 # 100% reproduction
    often: 3 # >50% reproduction
    sometimes: 2 # 10-50% reproduction
    rare: 1 # <10% reproduction

  impact_scores:
    system_wide: 4 # Entire system affected
    module: 3 # Module/service affected
    feature: 2 # Single feature affected
    edge_case: 1 # Rare scenario affected

# Execution Workflow with Mandatory Date Stamp Tracking
execution_steps:
  - "1. Load ALL input reports and test results (verify reverse date stamps)"
  - "2. CHECK ALL LOGS: Container, application, service logs (with timestamps)"
  - "3. Identify EVERY issue requiring resolution FROM LOGS (timestamp all findings)"
  - "4. Create exhaustive debugging plan"
  - "5. Set up complete debugging environment WITH LOGGING"
  - "6. Investigate EVERY issue comprehensively VIA LOGS"
  - "7. DOUBLE-CHECK: Review all logs for missed clues"
  - "8. Identify ALL true root causes FROM LOG EVIDENCE"
  - "9. Develop complete production-ready fixes"
  - "10. Apply SOLID, DRY, KISS principles"
  - "11. Create atomic git commits for each fix"
  - "12. CHECK LOGS: Verify fix implementation"
  - "13. Implement comprehensive tests (100% coverage)"
  - "14. MONITOR LOGS: During all test execution"
  - "15. Verify ALL fixes work correctly VIA LOGS"
  - "16. DOUBLE-CHECK: Confirm no errors in any logs"
  - "17. Ensure NO regressions introduced (CHECK LOGS)"
  - "18. Implement complete prevention measures"
  - "19. Set up comprehensive monitoring and logging"
  - "20. Document EVERYTHING in Jupyter notebooks (with reverse date stamps)"
  - "21. Prepare production deployment procedures (timestamp all documents)"
  - "22. FINAL LOG CHECK: All systems operational (record final timestamp)"
  - "23. Validate zero technical debt remains (timestamp validation)"
  - "24. Certify ALL issues completely resolved (final certification timestamp)"

  date_stamp_execution_requirements:
    - "MANDATORY: Record precise timestamps for each execution step"
    - "MANDATORY: Use UTC time for all timestamp recordings"
    - "MANDATORY: Include timestamps in all progress tracking"
    - "MANDATORY: Timestamp all deliverable file creation"
    - "FORBIDDEN: Proceeding without proper timestamp documentation"

# Log Monitoring Protocol
log_monitoring_protocol:
  continuous_checking:
    - "Before starting any debugging - CHECK ALL LOGS"
    - "During issue reproduction - MONITOR LOGS"
    - "While investigating - ANALYZE LOG PATTERNS"
    - "After implementing fixes - VERIFY IN LOGS"
    - "During testing - WATCH ALL LOGS"
    - "Before deployment - FINAL LOG REVIEW"

  double_check_requirements:
    - "After each phase - RE-EXAMINE all logs"
    - "Before conclusions - VERIFY log evidence"
    - "After fixes - CONFIRM no new errors"
    - "During validation - CHECK all log sources"
    - "Before sign-off - COMPLETE log audit"

# Validation Criteria
validation_criteria:
  issue_resolution: "MANDATORY - 100% of ALL issues completely resolved"
  root_cause_identification: "MANDATORY - ALL true root causes identified"
  fix_effectiveness: "MANDATORY - ALL fixes production-ready, no workarounds"
  test_coverage: "MANDATORY - 100% comprehensive test coverage"
  documentation_quality: "MANDATORY - Complete documentation for all fixes"
  prevention_measures: "MANDATORY - ALL future occurrences prevented"
  performance_maintained: "MANDATORY - Performance improved or maintained"
  code_principles: "MANDATORY - ALL fixes follow SOLID, DRY, KISS"
  git_practices: "MANDATORY - ALL commits atomic and well-documented"
  deployment_ready: "MANDATORY - ALL fixes production-deployment ready"

# Final Deliverables with Mandatory Reverse Date Stamps
final_deliverables:
  naming_convention: "MANDATORY: ALL output files MUST use reverse date stamp format: YYYY-MM-DD-HHMMSS"
  date_stamp_format: "{{YYYY}}-{{MM}}-{{DD}}-{{HHMMSS}}"
  example_format: "2025-09-22-142155"

  required_outputs:
    - "./project/docs/code-development/debugging/Debug_Analysis_Report_{{YYYY-MM-DD-HHMMSS}}.ipynb (exhaustive investigation of ALL issues)"
    - "./project/docs/code-development/debugging/Complete_Resolution_Log_{{YYYY-MM-DD-HHMMSS}}.ipynb (ALL fixes with atomic commits)"
    - "./project/docs/code-development/debugging/Root_Cause_Database_{{YYYY-MM-DD-HHMMSS}}.ipynb (ALL root causes documented)"

  date_stamp_requirements:
    - "MANDATORY: Use current UTC timestamp for all output files"
    - "MANDATORY: Format as YYYY-MM-DD-HHMMSS (reverse chronological order)"
    - "MANDATORY: Include date stamp in ALL deliverable filenames"
    - "MANDATORY: Use consistent date stamp across all session outputs"
    - "FORBIDDEN: Creating files without proper date stamps"
    - "FORBIDDEN: Using different date formats within same session"

# Codebase Hygiene Rules
codebase_hygiene:
  always_required:
    - "ALWAYS modify existing files"
    - "FIX in-place ONLY"
    - "DELETE debug artifacts"
    - "MAINTAIN clean repository"

  strictly_forbidden:
    - "FORBIDDEN: create duplicates"
    - "FORBIDDEN: create backups"
    - "FORBIDDEN: create alternatives"
    - "NO file.py.debug or debug_file.py"
    - "NO file.py.bak, file_old.py"
    - "NO file_broken.py, file_working.py"

# Prevention Framework
prevention_strategies:
  code_level:
    - "MANDATORY: Complete parameter validation"
    - "MANDATORY: Full defensive programming"
    - "MANDATORY: Comprehensive assertions"
    - "MANDATORY: Complete error handling"
    - "MANDATORY: Exhaustive debug logging"
    - "MANDATORY: Follow SOLID principles"
    - "FORBIDDEN: Code without validation"
    - "FORBIDDEN: Missing error handling"

  testing_level:
    - "MANDATORY: 100% test coverage"
    - "MANDATORY: All edge cases tested"
    - "MANDATORY: Complete fuzz testing"
    - "MANDATORY: Full integration tests"
    - "MANDATORY: Comprehensive chaos tests"
    - "FORBIDDEN: Untested code paths"
    - "FORBIDDEN: Missing test scenarios"

  system_level:
    - "MANDATORY: Complete monitoring coverage"
    - "MANDATORY: All necessary alerts"
    - "MANDATORY: Resilience patterns"
    - "MANDATORY: Comprehensive health checks"
    - "MANDATORY: Complete runbooks"
    - "FORBIDDEN: Unmonitored components"
    - "FORBIDDEN: Manual deployments"
