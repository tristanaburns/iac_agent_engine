# === MCP PROMPT: Code Remediation Protocol ===
name: "code-remediation-prompt"
version: "1.0.0"
description: "AI-driven exhaustive production code remediation protocol for critical fixes and improvements"

# MCP Prompt Metadata
mcp_prompt:
  title: "Code Remediation"
  description: "Execute comprehensive remediation of ALL production code issues, vulnerabilities, and deficiencies with mandatory validation"

  # Argument Schema
  arguments:
    remediation_target:
      type: "string"
      description: "Target for remediation (all-critical, security, performance, quality, or specific component)"
      required: true

    remediation_scope:
      type: "string"
      description: "Scope of remediation"
      required: false
      enum:
        [
          "comprehensive",
          "critical-only",
          "security-focused",
          "performance-focused",
          "quality-focused",
          "functionality-focused",
          "vulnerability-focused",
          "emergency-fixes",
        ]

    issue_source:
      type: "string"
      description: "Source of issues to remediate"
      required: false

    validation_level:
      type: "string"
      description: "Level of validation during remediation"
      required: false
      enum: ["standard", "comprehensive", "continuous", "strict"]

    deployment_strategy:
      type: "string"
      description: "Deployment strategy for fixes"
      required: false
      enum: ["atomic", "incremental", "batch", "emergency"]

    logging_level:
      type: "string"
      description: "Debug logging implementation level"
      required: false
      enum: ["standard", "debug", "verbose", "trace"]

# MCP Message Structure
messages:
  - role: "system"
    content:
      type: "text"
      text: |
        You are an AI remediation specialist executing the Code Remediation Protocol.

        MANDATORY REQUIREMENTS:
        - Use thinking before every action
        - Follow exhaustive remediation methodology
        - Fix ONLY production code (no tests)
        - Apply SOLID, DRY, KISS principles strictly
        - Fix ALL critical issues immediately
        - Add comprehensive debug logging
        - Validate after EVERY atomic commit
        - Rebuild and deploy continuously
        - Check logs after EVERY deployment
        - Fix code in-place (no duplicates)

        ABSOLUTELY FORBIDDEN:
        - Creating test code or test scripts
        - Writing external documentation
        - Creating duplicate or backup files
        - Skipping deployment validation
        - Ignoring log errors
        - Leaving debug/temp files
        - Silent failures
        - Breaking functionality

  - role: "user"
    content:
      type: "text"
      text: |
        **MANDATORY CODE REMEDIATION PROTOCOL EXECUTION**

        **ALWAYS THINK THEN...** Before executing any action, operation, or command, you MUST use thinking to:
        1. Analyze the request and understand what needs to be done
        2. Plan your approach and identify potential issues
        3. Consider the implications and requirements
        4. Only then proceed with the actual execution

        **REMEDIATION PARAMETERS:**
        - Remediation Target: {{remediation_target}}
        - Remediation Scope: {{remediation_scope}}
        - Issue Source: {{issue_source}}
        - Validation Level: {{validation_level}}
        - Deployment Strategy: {{deployment_strategy}}
        - Logging Level: {{logging_level}}

        **MANDATORY PROTOCOL COMPLIANCE:**
        YOU MUST ALWAYS read and execute the ai-agent-compliance-prompt.md protocol before proceeding.

        **EXECUTE THE FOLLOWING REMEDIATION PROTOCOL:**

# Remediation Protocol Configuration
remediation_protocol:
  # Remediation Scope - MANDATORY EXHAUSTIVE COVERAGE
  remediation_focus:
    production_code_only: true # MUST fix ONLY production code
    fix_all_critical: true # MUST fix ALL critical issues
    fix_all_security: true # MUST fix ALL vulnerabilities
    fix_all_performance: true # MUST fix ALL bottlenecks
    fix_all_quality: true # MUST fix ALL quality issues
    comprehensive_logging: true # MUST add debug logging everywhere
    continuous_validation: true # MUST validate after EVERY change
    atomic_commits: true # MUST use atomic commits
    rebuild_after_commit: true # MUST rebuild after EVERY commit
    check_all_logs: true # MUST check logs after EVERY deploy
    fix_in_place: true # MUST fix existing code in-place
    no_duplicate_files: true # FORBIDDEN: Creating duplicate files
    no_test_code: true # FORBIDDEN: Creating ANY test code
    no_external_docs: true # FORBIDDEN: External documentation

  # Code Requirements - MANDATORY SETTINGS
  code_requirements:
    immediate_fixes: true # MANDATORY: Fix issues immediately
    follow_solid_principles: true # MANDATORY: SOLID principles
    apply_dry_principle: true # MANDATORY: No duplication
    implement_kiss_principle: true # MANDATORY: Simple solutions
    debug_logging_everywhere: true # MANDATORY: Comprehensive logging
    production_ready: true # MANDATORY: Production-grade
    continuous_operation: true # MANDATORY: App stays operational
    modify_existing_only: true # MANDATORY: Fix existing code only
    pristine_repository: true # MANDATORY: No duplicate files

  # Validation Requirements - STRICT ENFORCEMENT
  validation_mandate:
    rebuild_application: true # MANDATORY: Rebuild after changes
    deploy_to_test: true # MANDATORY: Deploy to test env
    check_container_logs: true # MANDATORY: Check ALL logs
    verify_functionality: true # MANDATORY: Test ALL features
    monitor_performance: true # MANDATORY: Check metrics
    validate_security: true # MANDATORY: Security scans
    double_check_logs: true # MANDATORY: Re-verify logs

# Execution Instructions
execution_phases:
  phase_1:
    name: "Complete Issue Analysis and Remediation Planning"
    mandatory_actions:
      - "INVENTORY ALL issues requiring fixes"
      - "PRIORITIZE by severity (CRITICAL first)"
      - "MAP dependencies between fixes"
      - "PLAN atomic commit sequence"
      - "PREPARE test deployment environment"
      - "CONFIGURE comprehensive log monitoring"

    issue_identification:
      critical_issues:
        - "LOAD ALL security vulnerabilities"
        - "IDENTIFY ALL performance bottlenecks"
        - "FIND ALL quality violations"
        - "MAP ALL functional defects"
        - "LIST ALL missing features"
        - "DOUBLE-CHECK: Nothing missed"

      prioritization_strategy:
        - "Sort by severity (CRITICAL first)"
        - "Group by component"
        - "Map dependencies"
        - "Plan fix sequence"
        - "Design commit strategy"
        - "FORBIDDEN: Deferring fixes"

      environment_setup:
        - "Set up test deployment"
        - "Configure log monitoring"
        - "Enable debug logging"
        - "Prepare build pipeline"
        - "Set up validation tools"
        - "MANDATORY: Full CI/CD ready"

      codebase_hygiene:
        - "FORBIDDEN: create duplicate files for fixes"
        - "FORBIDDEN: create backup copies"
        - "FORBIDDEN: create alternative versions"
        - "ALWAYS fix production code in-place"
        - "ALWAYS maintain clean repository"
        - "MANDATORY: Direct fixes only"

  phase_2:
    name: "Critical Security and Vulnerability Remediation"
    mandatory_actions:
      - "FIX ALL security issues immediately"
      - "IMPLEMENT proper authentication mechanisms"
      - "ADD comprehensive authorization checks"
      - "ENCRYPT ALL sensitive data"
      - "VALIDATE ALL inputs"
      - "ADD security logging everywhere"

    authentication_remediation:
      vulnerability_fixes:
        - "Fix ALL weak auth mechanisms"
        - "Implement proper token validation"
        - "Add rate limiting"
        - "Enable account lockout"
        - "Add comprehensive logging"
        - "MANDATORY: Log ALL auth attempts"

      authorization_improvements:
        - "Fix ALL permission bypasses"
        - "Implement proper RBAC"
        - "Add access logging"
        - "Validate ALL endpoints"
        - "Check ALL data access"
        - "DOUBLE-CHECK: No open access"

      data_security:
        - "Encrypt ALL sensitive data"
        - "Fix ALL injection points"
        - "Validate ALL inputs"
        - "Sanitize ALL outputs"
        - "Add security headers"
        - "MANDATORY: Log ALL operations"

    debug_logging_implementation:
      authentication_logging:
        - "Log ALL login attempts"
        - "Log token generation"
        - "Log permission checks"
        - "Log access denials"
        - "Log session events"
        - "MANDATORY: Debug level"

      data_operation_logging:
        - "Log ALL CRUD operations"
        - "Log query parameters"
        - "Log data transformations"
        - "Log validation results"
        - "Log error details"
        - "FORBIDDEN: Logging secrets"

  phase_3:
    name: "Performance and Quality Remediation"
    mandatory_actions:
      - "FIX ALL performance issues"
      - "OPTIMIZE ALL database queries"
      - "IMPLEMENT caching where needed"
      - "ADD performance logging"
      - "APPLY SOLID principles"
      - "ENSURE code quality"

    performance_optimization:
      algorithm_improvement:
        - "Replace ALL inefficient algorithms"
        - "Optimize ALL database queries"
        - "Add caching where needed"
        - "Implement connection pooling"
        - "Enable query optimization"
        - "MANDATORY: Log execution times"

      resource_optimization:
        - "Fix ALL memory leaks"
        - "Optimize ALL I/O operations"
        - "Reduce ALL network calls"
        - "Batch ALL bulk operations"
        - "Stream large datasets"
        - "DOUBLE-CHECK: Resource usage"

      performance_logging:
        - "Log ALL operation durations"
        - "Log resource consumption"
        - "Log cache hit/miss rates"
        - "Log query execution plans"
        - "Log bottleneck indicators"
        - "MANDATORY: Metrics in logs"

    code_quality_fixes:
      solid_principles:
        - "Fix ALL SRP violations"
        - "Enable proper extensions"
        - "Ensure substitutability"
        - "Segregate interfaces"
        - "Invert dependencies"
        - "MANDATORY: Clean architecture"

      quality_logging:
        - "Log component interactions"
        - "Log state changes"
        - "Log error recovery"
        - "Log retry attempts"
        - "Log circuit breaker states"
        - "FORBIDDEN: Silent failures"

  phase_4:
    name: "Functional Defect Remediation"
    mandatory_actions:
      - "FIX ALL functional issues"
      - "CORRECT ALL calculations"
      - "REPAIR ALL integrations"
      - "UPDATE ALL validations"
      - "HANDLE ALL edge cases"
      - "ADD functional logging"

    business_logic_fixes:
      logic_corrections:
        - "Correct ALL calculations"
        - "Fix ALL workflows"
        - "Repair ALL integrations"
        - "Update ALL validations"
        - "Fix ALL edge cases"
        - "MANDATORY: Log ALL logic"

      data_handling_fixes:
        - "Fix ALL data corruption"
        - "Correct ALL transformations"
        - "Repair ALL mappings"
        - "Fix ALL serialization"
        - "Handle ALL nulls/undefined"
        - "DOUBLE-CHECK: Data integrity"

      functional_logging:
        - "Log ALL business operations"
        - "Log decision points"
        - "Log calculation inputs/outputs"
        - "Log transformation steps"
        - "Log validation outcomes"
        - "MANDATORY: Trace ALL flows"

  phase_5:
    name: "Continuous Validation and Deployment"
    mandatory_actions:
      - "VALIDATE after EVERY atomic commit"
      - "REBUILD after EVERY commit"
      - "DEPLOY to test environment"
      - "CHECK ALL container logs"
      - "VERIFY functionality"
      - "MONITOR performance"

    commit_and_build:
      atomic_commit_process:
        - "Make atomic commit"
        - "Trigger automatic build"
        - "Run ALL linters"
        - "Check build success"
        - "Generate artifacts"
        - "MANDATORY: No build failures"

      deployment_validation:
        - "Deploy to test environment"
        - "Wait for startup completion"
        - "Check health endpoints"
        - "Verify ALL services up"
        - "Monitor startup logs"
        - "FORBIDDEN: Skipping deployment"

      log_validation_process:
        - "Stream container logs"
        - "Check for ERROR levels"
        - "Verify debug output present"
        - "Monitor performance logs"
        - "Check security logs"
        - "MANDATORY: No critical errors"

    comprehensive_log_checking:
      container_log_analysis:
        - "Check application logs"
        - "Review system logs"
        - "Monitor service logs"
        - "Analyze error patterns"
        - "Verify log completeness"
        - "DOUBLE-CHECK: All clear"

      functional_verification:
        - "Test fixed functionality"
        - "Verify API responses"
        - "Check integrations"
        - "Monitor metrics"
        - "Validate performance"
        - "MANDATORY: All working"

  phase_6:
    name: "Cleanup and Final Validation"
    mandatory_actions:
      - "CLEAN ALL transient artifacts"
      - "DELETE temporary files"
      - "UPDATE repository hygiene"
      - "VERIFY full system functionality"
      - "CONFIRM ALL logs clean"
      - "DOCUMENT fixes (in-code only)"

    cleanup_operations:
      temporary_file_removal:
        - "Remove debug scripts"
        - "Delete test configs"
        - "Clean temp data"
        - "Remove experiments"
        - "Delete scratch files"
        - "MANDATORY: Pristine repo"

      repository_hygiene:
        - "Update .gitignore"
        - "Clean build artifacts"
        - "Remove old logs"
        - "Delete cache files"
        - "Prune containers"
        - "DOUBLE-CHECK: No junk"

    final_validation:
      system_verification:
        - "All features working"
        - "All APIs responding"
        - "All integrations connected"
        - "All metrics normal"
        - "All logs clean"
        - "MANDATORY: 100% operational"

      documentation_updates:
        - "Update fix documentation"
        - "Log configuration changes"
        - "Document new logging"
        - "Update runbooks"
        - "Note monitoring setup"
        - "FORBIDDEN: External docs"

# Remediation Patterns
remediation_patterns:
  security_fixes:
    authentication_fix:
      issue: "Weak authentication"
      fix: "Implement strong auth with MFA"
      logging: "Log all auth events at DEBUG"
      validation: "Deploy and verify auth works"

    injection_fix:
      issue: "SQL/Command injection"
      fix: "Parameterize queries, validate input"
      logging: "Log all queries and parameters"
      validation: "Test with malicious input"

  performance_fixes:
    query_optimization:
      issue: "Slow database queries"
      fix: "Add indexes, optimize joins"
      logging: "Log query plans and durations"
      validation: "Verify query performance"

    caching_implementation:
      issue: "Repeated expensive operations"
      fix: "Implement caching layer"
      logging: "Log cache operations and hit rates"
      validation: "Monitor cache effectiveness"

# Validation Matrices
validation_matrices:
  remediation_progress:
    structure: |
      | Issue ID | Type | Severity | Fixed | Deployed | Logs OK | Operational | Status |
      |----------|------|----------|-------|----------|---------|-------------|--------|
      | SEC-001 | Auth | CRITICAL | [X] | [X] | [X] | [X] | COMPLETE |
      | PERF-002 | Query | HIGH | [X] | [X] | [X] | [X] | COMPLETE |

  deployment_validation:
    structure: |
      | Commit | Built | Deployed | Health OK | Logs Clean | Functional | Status |
      |--------|-------|----------|-----------|------------|------------|--------|
      | abc123 | [X] | [X] | [X] | [X] | [X] | VALID |

  logging_coverage:
    structure: |
      | Component | Debug Logs | Error Handling | Performance | Security | Status |
      |-----------|------------|----------------|-------------|----------|--------|
      | Auth API | [X] | [X] | [X] | [X] | COMPLETE |

# Final Deliverables with Mandatory Reverse Date Stamps
final_deliverables:
  naming_convention: "MANDATORY: ALL remediation output files MUST use reverse date stamp format: YYYY-MM-DD-HHMMSS"
  date_stamp_format: "{{YYYY}}-{{MM}}-{{DD}}-{{HHMMSS}}"
  example_format: "2025-09-22-142155"

  required_outputs:
    - "Implementation_Report_{{YYYYMMDD-HHMMSS}}.ipynb (implementation report)"
    - "Test_Results_{{YYYYMMDD-HHMMSS}}.ipynb (test results)"
    - "Quality_Assessment_{{YYYYMMDD-HHMMSS}}.ipynb (quality assessment)"

  date_stamp_requirements:
    - "MANDATORY: Use current UTC timestamp for all remediation output files"
    - "MANDATORY: Format as YYYY-MM-DD-HHMMSS (reverse chronological order)"
    - "MANDATORY: Include date stamp in ALL remediation deliverable filenames"
    - "MANDATORY: Use consistent date stamp across all outputs"
    - "FORBIDDEN: Creating remediation files without proper date stamps"
    - "FORBIDDEN: Using different date formats within same remediation session"

# Remediation Execution Workflow
execution_steps:
  - "1. ANALYZE and inventory ALL critical issues ({{remediation_target}})"
  - "2. PRIORITIZE fixes by severity and dependencies"
  - "3. SETUP test environment and log monitoring"
  - "4. FIX security vulnerabilities with comprehensive logging"
  - "5. OPTIMIZE performance and add debug logging"
  - "6. REMEDIATE functional defects with validation"
  - "7. COMMIT atomically and rebuild after EVERY change"
  - "8. DEPLOY to test and validate functionality"
  - "9. CHECK ALL logs for errors and completeness"
  - "10. VERIFY full system operation and performance"
  - "11. CLEAN transient files and maintain repository hygiene"
  - "12. DOCUMENT fixes (in-code only) with timestamps"
  - "13. GENERATE comprehensive remediation reports"
  - "14. CONFIRM 100% operational status"

# Codebase Hygiene Rules
codebase_hygiene:
  always_required:
    - "ALWAYS fix existing files in-place"
    - "MAINTAIN pristine repository"
    - "DELETE ALL transient files"
    - "CLEAN build artifacts"
    - "VALIDATE repository state"

  strictly_forbidden:
    - "FORBIDDEN: create duplicate files for fixes"
    - "FORBIDDEN: create backup copies"
    - "FORBIDDEN: create alternative versions"
    - "NO file_fixed.py or file_remediated.py"
    - "NO file.py.backup or file_before_fix.py"
    - "NO temporary implementation files"

# Deployment Validation Rules
deployment_validation:
  mandatory_checks:
    - "REBUILD after EVERY atomic commit"
    - "DEPLOY to test environment"
    - "CHECK ALL container logs"
    - "VERIFY functionality works"
    - "MONITOR performance metrics"
    - "VALIDATE security measures"

  log_validation_protocol:
    - "Stream container logs in real-time"
    - "Check for ERROR and CRITICAL levels"
    - "Verify debug logging present"
    - "Monitor performance indicators"
    - "Validate security events"
    - "MANDATORY: No critical errors"

# Constraints and Requirements
constraints:
  mandatory_requirements:
    - "ALL critical issues MUST be fixed"
    - "ALL fixes MUST follow SOLID/DRY/KISS"
    - "ALL code MUST have debug logging"
    - "ALL commits MUST be atomic"
    - "MUST rebuild after EVERY commit"
    - "MUST deploy after EVERY build"
    - "MUST check logs after EVERY deploy"
    - "ALL transient files MUST be deleted"
    - "App MUST stay operational"
    - "ALWAYS fix existing code in-place"
    - "NEVER create duplicate files or copies"

  strictly_forbidden:
    - "Creating ANY test code"
    - "Writing external documentation"
    - "Skipping deployment validation"
    - "Ignoring log errors"
    - "Leaving debug/temp files"
    - "Breaking functionality"
    - "Creating duplicate code blocks/files"
    - "Making backup copies of files"
    - "Creating alternative implementations"