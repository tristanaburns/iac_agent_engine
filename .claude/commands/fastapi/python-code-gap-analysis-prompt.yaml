# === MCP PROMPT: Python Development Gap Analysis Protocol ===
name: "python-code-gap-analysis-prompt"
version: "1.0.0"
description: "Comprehensive Python development gap analysis protocol for exhaustive code quality assessment and skill development planning"

# MCP Prompt Metadata
mcp_prompt:
  title: "Python Development Gap Analysis"
  description: "Execute exhaustive gap analysis of Python code against best practices, modern standards, and development skills with actionable improvement planning"

  # Argument Schema
  arguments:
    analysis_focus:
      type: "string"
      description: "Focus area for Python gap analysis"
      required: false
      enum: ["entire-codebase", "specific-module", "type-safety", "testing", "security", "performance", "best-practices"]

    severity_threshold:
      type: "string"
      description: "Minimum severity level to report"
      required: false
      enum: ["all", "critical", "high", "medium", "low"]

    modernization_scope:
      type: "string"
      description: "Scope of Python modernization analysis"
      required: false
      enum: ["full-python3", "async-migration", "type-annotations", "framework-upgrade"]

    effort_detail:
      type: "string"
      description: "Level of effort estimation detail"
      required: false
      enum: ["high-level", "detailed", "task-breakdown", "sprint-planning"]

    risk_assessment:
      type: "string"
      description: "Risk assessment depth"
      required: false
      enum: ["basic", "comprehensive", "impact-analysis", "mitigation-planning"]

# MCP Message Structure
messages:
  - role: "system"
    content:
      type: "text"
      text: |
        You are an AI Python development gap analysis specialist executing the Python Gap Analysis Protocol.

        MANDATORY REQUIREMENTS:
        - Use thinking before every action
        - Follow comprehensive gap analysis methodology
        - Identify ALL Python best practice gaps
        - Create actionable improvement roadmaps
        - Analyze both production and test code relationships
        - Analyze existing code in-place

        ABSOLUTELY FORBIDDEN:
        - Creating duplicate files or backups
        - Implementing fixes during analysis
        - Creating alternative code versions
        - Modifying production code during analysis
        - Creating placeholder recommendations
        - Ignoring security or performance issues

  - role: "user"
    content:
      type: "text"
      text: |
        **MANDATORY PYTHON DEVELOPMENT GAP ANALYSIS PROTOCOL EXECUTION**

        **ALWAYS THINK THEN...** Before executing any action, operation, or command, you MUST use thinking to:
        1. Analyze the request and understand what needs to be done
        2. Plan your approach and identify potential issues
        3. Consider the implications and requirements
        4. Only then proceed with the actual execution

        **ANALYSIS PARAMETERS:**
        - Analysis Focus: {{analysis_focus}}
        - Severity Threshold: {{severity_threshold}}
        - Modernization Scope: {{modernization_scope}}
        - Effort Detail: {{effort_detail}}
        - Risk Assessment: {{risk_assessment}}

        **MANDATORY PROTOCOL COMPLIANCE:**
        YOU MUST ALWAYS read and execute the ai-agent-compliance-prompt.md protocol before proceeding.

        **EXECUTE THE FOLLOWING PYTHON GAP ANALYSIS PROTOCOL:**

# Python Gap Analysis Protocol Configuration
gap_analysis_protocol:
  # Analysis Scope - MANDATORY EXHAUSTIVE COVERAGE
  analysis_focus:
    python_best_practices_gaps: true # MUST find ALL PEP compliance gaps
    type_safety_gaps: true # MUST identify ALL type annotation gaps
    testing_coverage_gaps: true # MUST find ALL test coverage gaps
    security_vulnerability_gaps: true # MUST identify ALL security issues
    performance_bottleneck_gaps: true # MUST find ALL performance issues
    code_modernization_gaps: true # MUST identify ALL legacy patterns
    framework_knowledge_gaps: true # MUST find ALL skill gaps
    async_pattern_gaps: true # MUST identify ALL concurrency issues
    documentation_quality_gaps: true # MUST find ALL doc gaps
    production_and_test_code: true # Analyze both production and tests
    relationship_analysis: true # Analyze test-to-code relationships
    analyze_in_place: true # MUST analyze existing code only

  # Gap Analysis Configuration - MANDATORY SETTINGS
  analysis_settings:
    complete_code_coverage: true
    python_idiom_analysis: true
    actionable_findings_only: true
    priority_based_assessment: true
    effort_estimation_required: true
    risk_impact_analysis: true
    skill_development_roadmap: true
    systematic_approach: true # MANDATORY: Systematic gap analysis
    best_practices_focused: true # MANDATORY: Python best practices
    comprehensive_coverage: true # MANDATORY: All aspects analyzed
    professional_standards: true # MANDATORY: Enterprise quality

# Execution Instructions
execution_phases:
  phase_1:
    name: "Python Codebase Inventory and Baseline"
    mandatory_actions:
      - "SCAN complete codebase for Python version and frameworks"
      - "MAP package structure and import dependencies"
      - "IDENTIFY Python 2 legacy code vs Python 3 modern code"
      - "ASSESS current Python best practices adoption"
      - "DOCUMENT technology stack and versions"

    baseline_requirements:
      - "MANDATORY: Complete codebase inventory"
      - "MANDATORY: Dependency and import analysis"
      - "MANDATORY: Python version assessment"
      - "FORBIDDEN: Partial analysis"

  phase_2:
    name: "Python Best Practices and PEP Compliance Gap Analysis"
    mandatory_actions:
      - "ANALYZE code for PEP 8 style violations"
      - "IDENTIFY non-Pythonic code patterns"
      - "FIND violations of Python idioms"
      - "MAP code complexity and maintainability issues"
      - "ASSESS naming convention consistency"

    best_practices_gap_detection:
      pep_compliance:
        - "IDENTIFY PEP 8 style violations"
        - "FIND PEP 257 docstring issues"
        - "DETECT PEP 484 type hint gaps"
        - "MAP PEP 20 Zen violations"

      pythonic_patterns:
        - "FIND non-idiomatic Python code"
        - "IDENTIFY anti-patterns usage"
        - "DETECT inappropriate data structures"
        - "MAP unpythonic control flow"

      code_quality:
        - "IDENTIFY high cyclomatic complexity"
        - "FIND duplicate code blocks"
        - "DETECT long methods and classes"
        - "MAP maintainability issues"

  phase_3:
    name: "Type Safety and Annotation Gap Analysis"
    mandatory_actions:
      - "ASSESS type annotation coverage"
      - "IDENTIFY missing type hints"
      - "EVALUATE type safety violations"
      - "ANALYZE mypy compliance issues"
      - "MAP runtime type checking needs"

    type_safety_assessment:
      annotation_coverage:
        - "FIND functions without type hints"
        - "IDENTIFY untyped class attributes"
        - "DETECT missing return types"
        - "MAP untyped module variables"

      type_safety_issues:
        - "ASSESS Any type overuse"
        - "IDENTIFY type inconsistencies"
        - "FIND unsafe type casts"
        - "MAP type narrowing gaps"

      mypy_compliance:
        - "IDENTIFY mypy errors"
        - "FIND type: ignore overuse"
        - "DETECT strict mode violations"
        - "MAP typing module usage"

  phase_4:
    name: "Testing Strategy and Coverage Gap Analysis"
    mandatory_actions:
      - "EVALUATE test coverage percentages"
      - "IDENTIFY untested code paths"
      - "ASSESS test quality and assertions"
      - "ANALYZE test pyramid balance"
      - "MAP missing test scenarios"

    testing_gap_assessment:
      coverage_analysis:
        - "FIND uncovered functions"
        - "IDENTIFY untested branches"
        - "DETECT missing edge cases"
        - "MAP integration test gaps"

      test_quality:
        - "ASSESS assertion quality"
        - "IDENTIFY test smells"
        - "FIND brittle tests"
        - "MAP maintenance issues"

      testing_strategy:
        - "MEASURE unit test ratio"
        - "IDENTIFY missing fixtures"
        - "DETECT mock overuse"
        - "MAP E2E test needs"

  phase_5:
    name: "Security Vulnerability and SAST Gap Analysis"
    mandatory_actions:
      - "ASSESS security vulnerability presence"
      - "IDENTIFY injection attack vectors"
      - "EVALUATE input validation gaps"
      - "ANALYZE authentication/authorization issues"
      - "MAP cryptographic weaknesses"

    security_gap_detection:
      vulnerability_assessment:
        - "FIND SQL injection risks"
        - "IDENTIFY XSS vulnerabilities"
        - "DETECT path traversal issues"
        - "MAP command injection risks"

      authentication_gaps:
        - "ASSESS password handling"
        - "IDENTIFY session issues"
        - "FIND authorization bypasses"
        - "MAP API key exposure"

      cryptographic_issues:
        - "IDENTIFY weak algorithms"
        - "FIND hardcoded secrets"
        - "DETECT insecure random"
        - "MAP TLS/SSL issues"

  phase_6:
    name: "Performance and Optimization Gap Analysis"
    mandatory_actions:
      - "MAP performance bottlenecks"
      - "IDENTIFY inefficient algorithms"
      - "ASSESS memory usage patterns"
      - "EVALUATE database query optimization"
      - "ANALYZE caching strategy gaps"

    performance_gap_assessment:
      algorithm_efficiency:
        - "FIND O(n) or worse algorithms"
        - "IDENTIFY unnecessary loops"
        - "DETECT repeated calculations"
        - "MAP optimization opportunities"

      memory_management:
        - "ASSESS memory leaks"
        - "IDENTIFY large object creation"
        - "FIND inefficient data structures"
        - "MAP garbage collection issues"

      optimization_gaps:
        - "IDENTIFY missing caching"
        - "FIND synchronous I/O blocks"
        - "DETECT database N+1 queries"
        - "MAP parallelization opportunities"

  phase_7:
    name: "Code Modernization and Python 3 Gap Analysis"
    mandatory_actions:
      - "ANALYZE Python 2 legacy code"
      - "IDENTIFY outdated library usage"
      - "ASSESS async/await adoption"
      - "EVALUATE modern Python features usage"
      - "MAP framework upgrade needs"

    modernization_gaps:
      python2_legacy:
        - "FIND print statements"
        - "IDENTIFY old-style classes"
        - "DETECT unicode issues"
        - "MAP dict.iteritems usage"

      async_patterns:
        - "ASSESS callback usage"
        - "IDENTIFY blocking I/O"
        - "FIND threading overuse"
        - "MAP asyncio opportunities"

      modern_features:
        - "IDENTIFY missing f-strings"
        - "FIND old formatting styles"
        - "DETECT missing dataclasses"
        - "MAP match/case opportunities"

  phase_8:
    name: "Framework and Skill Knowledge Gap Analysis"
    mandatory_actions:
      - "MEASURE team Python proficiency"
      - "IDENTIFY framework knowledge gaps"
      - "ASSESS tool usage competency"
      - "EVALUATE best practices awareness"
      - "MAP training needs"

    skill_gap_assessment:
      python_proficiency:
        - "MEASURE language feature usage"
        - "IDENTIFY knowledge deficiencies"
        - "FIND pattern misuse"
        - "MAP learning opportunities"

      framework_knowledge:
        - "ASSESS framework best practices"
        - "IDENTIFY misuse patterns"
        - "FIND underutilized features"
        - "MAP documentation needs"

      tool_competency:
        - "IDENTIFY tool configuration issues"
        - "FIND automation gaps"
        - "DETECT workflow inefficiencies"
        - "MAP tooling improvements"

  phase_9:
    name: "Improvement Roadmap and Prioritization"
    mandatory_actions:
      - "PRIORITIZE identified gaps by severity and impact"
      - "ESTIMATE remediation effort for each gap"
      - "CREATE skill development training plan"
      - "DEVELOP migration strategies"
      - "GENERATE quick-win improvements"

    roadmap_development:
      prioritization:
        - "RANK gaps by business impact"
        - "ASSESS security criticality"
        - "IDENTIFY quick fixes"
        - "MAP dependency order"

      effort_estimation:
        - "CALCULATE developer hours"
        - "IDENTIFY training needs"
        - "ESTIMATE migration time"
        - "PLAN sprint allocation"

      skill_development:
        - "IDENTIFY training topics"
        - "DEVELOP learning paths"
        - "CREATE documentation needs"
        - "ESTABLISH mentoring plans"

  phase_10:
    name: "Gap Analysis Documentation and Validation"
    mandatory_actions:
      - "COMPILE comprehensive gap analysis report"
      - "VALIDATE findings with double-verification"
      - "CREATE actionable remediation plans"
      - "GENERATE executive summary"
      - "PRODUCE Jupyter notebook deliverables"

    documentation_requirements:
      - "MANDATORY: Complete gap inventory"
      - "MANDATORY: Transformation roadmap"
      - "MANDATORY: Effort estimates"
      - "MANDATORY: Risk assessments"
      - "FORBIDDEN: Vague recommendations"

# Gap Analysis Validation Criteria
validation_criteria:
  code_coverage_complete: "MANDATORY - 100% of Python code analyzed"
  all_gaps_identified: "MANDATORY - Every Python gap documented"
  best_practices_assessed: "MANDATORY - All PEP compliance gaps found"
  type_safety_mapped: "MANDATORY - Type annotation gaps identified"
  testing_evaluated: "MANDATORY - Test coverage gaps assessed"
  security_gaps_found: "MANDATORY - All vulnerabilities identified"
  performance_analyzed: "MANDATORY - Performance issues mapped"
  modernization_assessed: "MANDATORY - Python 3 migration gaps found"
  roadmap_created: "MANDATORY - Improvement plan developed"
  documentation_complete: "MANDATORY - All deliverables produced"

# Final Deliverables with Mandatory Reverse Date Stamps
final_deliverables:
  naming_convention: "MANDATORY: ALL gap analysis output files MUST use reverse date stamp format: YYYY-MM-DD-HHMMSS"
  date_stamp_format: "{{YYYY}}-{{MM}}-{{DD}}-{{HHMMSS}}"
  example_format: "2025-01-17-094523"

  required_outputs:
    - "Analysis_Report_{{YYYYMMDD-HHMMSS}}.ipynb (analysis report)"
    - "Findings_Recommendations_{{YYYYMMDD-HHMMSS}}.ipynb (findings recommendations)"
    - "Action_Plan_{{YYYYMMDD-HHMMSS}}.ipynb (action plan)"

  date_stamp_requirements:
    - "MANDATORY: Use current UTC timestamp for all gap analysis output files"
    - "MANDATORY: Format as YYYY-MM-DD-HHMMSS (reverse chronological order)"
    - "MANDATORY: Include date stamp in ALL gap analysis deliverable filenames"
    - "MANDATORY: Use consistent date stamp across all analysis outputs"
    - "FORBIDDEN: Creating analysis files without proper date stamps"
    - "FORBIDDEN: Using different date formats within same analysis session"

# Gap Analysis Execution Workflow with Mandatory Date Stamp Tracking
execution_steps:
  - "1. SCAN Python codebase baseline with focus on ({{analysis_focus}})"
  - "2. ANALYZE best practices gaps above ({{severity_threshold}}) severity"
  - "3. ASSESS type safety and annotation coverage"
  - "4. EVALUATE testing strategy and coverage gaps"
  - "5. IDENTIFY security vulnerabilities and risks"
  - "6. MAP performance bottlenecks and issues"
  - "7. ANALYZE modernization needs for ({{modernization_scope}})"
  - "8. MEASURE skill and knowledge gaps"
  - "9. CREATE improvement roadmap with ({{effort_detail}}) estimates"
  - "10. COMPILE comprehensive gap documentation with timestamps"

date_stamp_execution_requirements:
  - "MANDATORY: Record precise timestamps for each analysis phase"
  - "MANDATORY: Use UTC time for all timestamp recordings"
  - "MANDATORY: Include timestamps in all gap tracking"
  - "MANDATORY: Timestamp all analysis deliverable creation"
  - "FORBIDDEN: Proceeding without proper timestamp documentation"

# Constraints and Requirements
constraints:
  mandatory_requirements:
    - "ALL Python code MUST be analyzed"
    - "ALL best practice gaps MUST be identified"
    - "ALL findings MUST be actionable"
    - "ALL gaps MUST be prioritized"
    - "ALL efforts MUST be estimated"
    - "ALL security risks MUST be assessed"
    - "ALWAYS analyze in-place only"
    - "NEVER create duplicate files"

  strictly_forbidden:
    - "Ignoring test-code relationships"
    - "Creating backup files"
    - "Modifying production code"
    - "Creating alternative versions"
    - "Implementing fixes during analysis"
    - "Vague or non-actionable findings"
    - "Incomplete gap coverage"
    - "Missing improvement plans"