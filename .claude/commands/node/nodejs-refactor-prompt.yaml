# === MCP PROMPT: Node.js Code Refactoring Protocol ===
name: "nodejs-refactor-prompt"
version: "1.0.0"
description: "Comprehensive Node.js code refactoring protocol for systematic quality improvement, SOLID principles application, and code modernization"

# MCP Prompt Metadata
mcp_prompt:
  title: "Node.js Code Refactoring"
  description: "Execute exhaustive refactoring of Node.js production code with SOLID principles, design patterns, and modernization while preserving functionality"

  # Argument Schema
  arguments:
    refactoring_target:
      type: "string"
      description: "Target Node.js module or package to refactor"
      required: true

    refactoring_approach:
      type: "string"
      description: "Refactoring transformation approach"
      required: true
      enum: ["gradual", "aggressive", "conservative"]

    pattern_application:
      type: "string"
      description: "Primary refactoring pattern focus"
      required: false
      enum: ["SOLID", "design-patterns", "modern-js", "performance"]

    modernization_level:
      type: "string"
      description: "Node.js modernization depth"
      required: false
      enum: ["full", "partial", "minimal"]

    type_annotation_strategy:
      type: "string"
      description: "TypeScript type annotation coverage strategy"
      required: false
      enum: ["comprehensive", "essential", "minimal"]

# MCP Message Structure
messages:
  - role: "system"
    content:
      type: "text"
      text: |
        You are an AI Node.js refactoring specialist executing the Node.js Code Refactoring Protocol.

        MANDATORY REQUIREMENTS:
        - Use thinking before every action
        - Follow systematic refactoring methodology
        - Apply SOLID principles comprehensively
        - Implement appropriate design patterns
        - Modernize code to Node.js 21.x+ standards
        - Transform code in-place only

        ABSOLUTELY FORBIDDEN:
        - Creating test code
        - Creating duplicate files or backups
        - Breaking existing functionality
        - Creating placeholder implementations
        - Leaving code in transitional state
        - Making incomplete transformations

  - role: "user"
    content:
      type: "text"
      text: |
        **MANDATORY NODE.JS REFACTORING PROTOCOL EXECUTION**

        **ALWAYS THINK THEN...** Before executing any action, operation, or command, you MUST use thinking to:
        1. Analyze the request and understand what needs to be done
        2. Plan your approach and identify potential issues
        3. Consider the implications and requirements
        4. Only then proceed with the actual execution

        **REFACTORING PARAMETERS:**
        - Refactoring Target: {{refactoring_target}}
        - Refactoring Approach: {{refactoring_approach}}
        - Pattern Application: {{pattern_application}}
        - Modernization Level: {{modernization_level}}
        - Type Annotation Strategy: {{type_annotation_strategy}}

        **MANDATORY PROTOCOL COMPLIANCE:**
        YOU MUST ALWAYS read and execute the ai-agent-compliance-prompt.md protocol before proceeding.

        **EXECUTE THE FOLLOWING NODE.JS REFACTORING PROTOCOL:**

# Node.js Refactoring Protocol Configuration
refactoring_protocol:
  # Refactoring Scope - MANDATORY TRANSFORMATION COVERAGE
  refactoring_focus:
    solid_principles: true # MUST apply SOLID principles
    design_patterns: true # MUST implement appropriate patterns
    code_modernization: true # MUST modernize to Node.js 21.x+
    type_annotations: true # MUST add TypeScript type hints
    code_smell_elimination: true # MUST remove code smells
    performance_optimization: true # MUST optimize algorithms
    nodejs_idioms: true # MUST apply Node.js best practices
    error_handling: true # MUST modernize error handling
    async_patterns: true # MUST optimize async/await usage
    module_systems: true # MUST convert to ES modules
    preserve_functionality: true # ABSOLUTELY preserve behavior

  # Refactoring Configuration - MANDATORY SETTINGS
  refactoring_settings:
    comprehensive_transformation: true
    in_place_modifications: true
    functionality_preservation: true
    architectural_improvements: true
    pattern_implementation: true
    timestamp_tracking: true
    systematic_approach: true # MANDATORY: Follow structured methodology
    complete_transformations: true # MANDATORY: No incomplete changes
    production_ready: true # MANDATORY: Production-quality output
    professional_standards: true # MANDATORY: Enterprise patterns

# Execution Instructions
execution_phases:
  phase_1:
    name: "Node.js Refactoring Scope Definition and Analysis"
    mandatory_actions:
      - "VALIDATE refactoring target exists and contains Node.js code"
      - "IDENTIFY all JavaScript/TypeScript files (.js, .ts, .jsx, .tsx)"
      - "MAP Node.js package structure and dependencies"
      - "ANALYZE code architecture and patterns"
      - "ESTABLISH refactoring baseline and objectives"

    scope_requirements:
      - "MANDATORY: Target validation and code analysis"
      - "MANDATORY: Node.js file identification and mapping"
      - "MANDATORY: Architecture assessment"
      - "FORBIDDEN: Modifying node_modules or external libraries"

  phase_2:
    name: "SOLID Principles Application (SRP, OCP, LSP, ISP, DIP)"
    mandatory_actions:
      - "APPLY Single Responsibility Principle to classes and functions"
      - "IMPLEMENT Open/Closed Principle with extensible designs"
      - "ENSURE Liskov Substitution Principle compliance"
      - "APPLY Interface Segregation with specific interfaces"
      - "IMPLEMENT Dependency Inversion with abstractions"

    solid_transformation:
      single_responsibility:
        - "IDENTIFY classes/functions with multiple responsibilities"
        - "EXTRACT separate concerns into dedicated modules"
        - "VALIDATE each unit has one reason to change"
        - "REFACTOR large functions into smaller, focused units"

      open_closed:
        - "DESIGN for extension without modification"
        - "IMPLEMENT strategy patterns for variation"
        - "CREATE plugin architectures where appropriate"
        - "USE composition over inheritance"

      liskov_substitution:
        - "ENSURE subtypes are substitutable for base types"
        - "VALIDATE interface contracts are maintained"
        - "FIX inheritance hierarchies"
        - "IMPLEMENT proper polymorphism"

      interface_segregation:
        - "SPLIT large interfaces into specific ones"
        - "CREATE role-based interfaces"
        - "AVOID forcing clients to depend on unused methods"
        - "IMPLEMENT focused contracts"

      dependency_inversion:
        - "DEPEND on abstractions, not concretions"
        - "IMPLEMENT dependency injection patterns"
        - "CREATE abstractions for external dependencies"
        - "INVERT control flow appropriately"

  phase_3:
    name: "Design Pattern Implementation"
    mandatory_actions:
      - "IDENTIFY opportunities for design pattern application"
      - "IMPLEMENT Factory patterns for object creation"
      - "APPLY Strategy patterns for algorithmic variations"
      - "IMPLEMENT Observer patterns for event handling"
      - "APPLY Command patterns for action encapsulation"

    pattern_implementation:
      creational_patterns:
        - "IMPLEMENT Factory pattern for complex object creation"
        - "APPLY Builder pattern for step-by-step construction"
        - "USE Singleton pattern where globally unique instances needed"
        - "IMPLEMENT Prototype pattern for object cloning"

      structural_patterns:
        - "APPLY Adapter pattern for interface compatibility"
        - "IMPLEMENT Decorator pattern for behavior extension"
        - "USE Facade pattern for simplified interfaces"
        - "APPLY Composite pattern for tree structures"

      behavioral_patterns:
        - "IMPLEMENT Strategy pattern for algorithm families"
        - "APPLY Observer pattern for loose coupling"
        - "USE Command pattern for parameterizing actions"
        - "IMPLEMENT State pattern for state-dependent behavior"

  phase_4:
    name: "Node.js 21.x+ Modernization"
    mandatory_actions:
      - "CONVERT CommonJS modules to ES modules"
      - "MODERNIZE callback patterns to async/await"
      - "UPDATE deprecated Node.js APIs to current versions"
      - "IMPLEMENT modern Node.js features and optimizations"
      - "APPLY current JavaScript/TypeScript language features"

    modernization_transformations:
      module_system:
        - "CONVERT require() calls to import statements"
        - "TRANSFORM module.exports to export statements"
        - "UPDATE package.json to specify module type"
        - "IMPLEMENT dynamic imports where needed"

      async_patterns:
        - "CONVERT callbacks to Promise-based APIs"
        - "TRANSFORM Promise chains to async/await"
        - "IMPLEMENT proper error handling in async code"
        - "OPTIMIZE async operations for performance"

      language_features:
        - "APPLY optional chaining and nullish coalescing"
        - "USE template literals for string construction"
        - "IMPLEMENT destructuring for cleaner code"
        - "APPLY spread/rest operators appropriately"

      node_apis:
        - "UPDATE to current Node.js built-in modules"
        - "IMPLEMENT node: protocol for built-ins"
        - "USE modern filesystem and stream APIs"
        - "APPLY current crypto and URL APIs"

  phase_5:
    name: "TypeScript Type Annotation Enhancement"
    mandatory_actions:
      - "ADD comprehensive type annotations to functions"
      - "IMPLEMENT interface definitions for complex objects"
      - "CREATE type definitions for module exports"
      - "APPLY generic types for reusable components"
      - "VALIDATE type safety and consistency"

    type_annotation:
      function_typing:
        - "ADD parameter and return type annotations"
        - "IMPLEMENT function overloads where needed"
        - "CREATE generic function types"
        - "VALIDATE type inference optimization"

      object_typing:
        - "CREATE interface definitions for objects"
        - "IMPLEMENT utility types for transformations"
        - "USE mapped types for dynamic properties"
        - "APPLY conditional types where beneficial"

      module_typing:
        - "CREATE type definition files"
        - "EXPORT types alongside implementations"
        - "IMPLEMENT module augmentation where needed"
        - "VALIDATE external library type compatibility"

  phase_6:
    name: "Code Smell Elimination and Quality Improvement"
    mandatory_actions:
      - "IDENTIFY and eliminate long methods and large classes"
      - "REMOVE code duplication through extraction"
      - "SIMPLIFY complex conditional logic"
      - "ELIMINATE dead code and unused variables"
      - "IMPROVE naming consistency and clarity"

    code_smell_removal:
      structural_issues:
        - "BREAK DOWN long methods into smaller functions"
        - "SPLIT large classes into focused components"
        - "ELIMINATE deep nesting through early returns"
        - "SIMPLIFY complex parameter lists"

      duplication_elimination:
        - "EXTRACT common functionality into utilities"
        - "CREATE reusable components for repeated patterns"
        - "IMPLEMENT shared interfaces for similar objects"
        - "CONSOLIDATE duplicate logic"

      clarity_improvements:
        - "IMPROVE variable and function naming"
        - "ELIMINATE magic numbers and strings"
        - "SIMPLIFY boolean expressions"
        - "REDUCE cognitive complexity"

  phase_7:
    name: "Performance Optimization and Algorithm Improvement"
    mandatory_actions:
      - "OPTIMIZE algorithms for better time complexity"
      - "IMPLEMENT efficient data structures"
      - "REDUCE memory usage and prevent leaks"
      - "OPTIMIZE async operations and I/O"
      - "IMPLEMENT caching strategies where beneficial"

    performance_optimization:
      algorithm_optimization:
        - "ANALYZE and improve algorithmic complexity"
        - "IMPLEMENT more efficient sorting and searching"
        - "OPTIMIZE loop structures and iterations"
        - "REDUCE unnecessary computations"

      memory_optimization:
        - "ELIMINATE memory leaks and references"
        - "OPTIMIZE object creation and destruction"
        - "IMPLEMENT efficient data structures"
        - "REDUCE memory footprint"

      async_optimization:
        - "PARALLELIZE independent operations"
        - "IMPLEMENT efficient Promise handling"
        - "OPTIMIZE I/O operations and database queries"
        - "IMPLEMENT proper connection pooling"

  phase_8:
    name: "Error Handling and Robustness Enhancement"
    mandatory_actions:
      - "IMPLEMENT comprehensive error handling strategies"
      - "CREATE custom error types for specific scenarios"
      - "APPLY proper error propagation patterns"
      - "IMPLEMENT graceful degradation mechanisms"
      - "VALIDATE input parameters and boundary conditions"

    error_handling_improvements:
      error_types:
        - "CREATE custom error classes for domain errors"
        - "IMPLEMENT error hierarchies for categorization"
        - "APPLY structured error information"
        - "VALIDATE error message consistency"

      error_propagation:
        - "IMPLEMENT proper error bubbling in async code"
        - "APPLY error boundaries in appropriate locations"
        - "CREATE error handling middleware"
        - "IMPLEMENT retry mechanisms where appropriate"

      robustness:
        - "VALIDATE input parameters comprehensively"
        - "IMPLEMENT defensive programming practices"
        - "CREATE fallback mechanisms for failures"
        - "APPLY circuit breaker patterns where needed"

  phase_9:
    name: "Code Organization and Architecture Improvement"
    mandatory_actions:
      - "ORGANIZE code into logical modules and layers"
      - "IMPLEMENT clear separation of concerns"
      - "CREATE consistent directory structure"
      - "ESTABLISH clear module boundaries"
      - "IMPLEMENT proper dependency management"

    architectural_improvements:
      module_organization:
        - "CREATE logical module groupings"
        - "IMPLEMENT layered architecture patterns"
        - "ESTABLISH clear public APIs"
        - "ORGANIZE utilities and shared code"

      dependency_management:
        - "IMPLEMENT dependency injection containers"
        - "CREATE clear dependency graphs"
        - "ELIMINATE circular dependencies"
        - "IMPLEMENT interface-based dependencies"

      code_structure:
        - "ORGANIZE files by feature or domain"
        - "CREATE consistent naming conventions"
        - "IMPLEMENT barrel exports for clean imports"
        - "ESTABLISH coding standards and guidelines"

  phase_10:
    name: "Refactoring Validation and Documentation"
    mandatory_actions:
      - "VALIDATE all functionality is preserved"
      - "VERIFY performance improvements"
      - "CONFIRM architectural improvements"
      - "DOCUMENT refactoring decisions and rationale"
      - "GENERATE comprehensive refactoring report"

    validation_requirements:
      - "MANDATORY: Functionality preservation verification"
      - "MANDATORY: Performance impact assessment"
      - "MANDATORY: Architecture improvement validation"
      - "MANDATORY: Code quality metrics improvement"
      - "FORBIDDEN: Missing transformation documentation"

# Refactoring Validation Criteria
validation_criteria:
  solid_applied: "MANDATORY - SOLID principles systematically applied"
  patterns_implemented: "MANDATORY - Design patterns appropriately implemented"
  code_modernized: "MANDATORY - Node.js 21.x+ features applied"
  types_annotated: "MANDATORY - TypeScript annotations comprehensive"
  smells_eliminated: "MANDATORY - Code smells removed"
  performance_optimized: "MANDATORY - Performance improvements applied"
  errors_handled: "MANDATORY - Error handling modernized"
  architecture_improved: "MANDATORY - Code organization enhanced"
  functionality_preserved: "MANDATORY - All behavior maintained"
  transformations_complete: "MANDATORY - All refactoring objectives met"

# Final Deliverables with Mandatory Reverse Date Stamps
final_deliverables:
  naming_convention: "MANDATORY: ALL refactoring output files MUST use reverse date stamp format: YYYY-MM-DD-HHMMSS"
  date_stamp_format: "{{YYYY}}-{{MM}}-{{DD}}-{{HHMMSS}}"
  example_format: "2025-01-17-094523"

  required_outputs:
    - "./project/docs/node-development/Refactoring_Plan-{{YYYY-MM-DD-HHMMSS}}.ipynb (comprehensive refactoring analysis)"
    - "./project/docs/node-development/Implementation_Guide-{{YYYY-MM-DD-HHMMSS}}.md (refactoring steps and patterns)"
    - "./project/docs/node-development/Validation_Report-{{YYYY-MM-DD-HHMMSS}}.md (testing and validation results)"

  date_stamp_requirements:
    - "MANDATORY: Use current UTC timestamp for all refactoring output files"
    - "MANDATORY: Format as YYYY-MM-DD-HHMMSS (reverse chronological order)"
    - "MANDATORY: Include date stamp in ALL refactoring deliverable filenames"
    - "MANDATORY: Use consistent date stamp across all refactoring outputs"
    - "FORBIDDEN: Creating refactoring files without proper date stamps"
    - "FORBIDDEN: Using different date formats within same refactoring session"

# Refactoring Execution Workflow with Mandatory Date Stamp Tracking
execution_steps:
  - "1. VALIDATE refactoring target ({{refactoring_target}}) contains Node.js code"
  - "2. APPLY SOLID principles with ({{refactoring_approach}}) approach"
  - "3. IMPLEMENT design patterns with ({{pattern_application}}) focus"
  - "4. MODERNIZE code to Node.js 21.x+ standards"
  - "5. ENHANCE TypeScript annotations with ({{type_annotation_strategy}}) strategy"
  - "6. ELIMINATE code smells and improve quality"
  - "7. OPTIMIZE performance and algorithms"
  - "8. MODERNIZE error handling patterns"
  - "9. IMPROVE code organization and architecture"
  - "10. VALIDATE and DOCUMENT all transformations with timestamps"

date_stamp_execution_requirements:
  - "MANDATORY: Record precise timestamps for each refactoring phase"
  - "MANDATORY: Use UTC time for all timestamp recordings"
  - "MANDATORY: Include timestamps in all transformation tracking"
  - "MANDATORY: Timestamp all refactoring deliverable creation"
  - "FORBIDDEN: Proceeding without proper timestamp documentation"

# Constraints and Requirements
constraints:
  mandatory_requirements:
    - "ALL refactoring objectives MUST be completed"
    - "ALL functionality MUST be preserved exactly"
    - "ALL transformations MUST be production-ready"
    - "ALL changes MUST be reversible if needed"
    - "ALL improvements MUST be measurable"
    - "ALL patterns MUST be correctly implemented"
    - "ALWAYS maintain code functionality"
    - "NEVER leave incomplete transformations"

  strictly_forbidden:
    - "Breaking existing functionality"
    - "Creating test code during refactoring"
    - "Making incomplete transformations"
    - "Leaving placeholder implementations"
    - "Creating duplicate files or backups"
    - "Skipping mandatory refactoring phases"
    - "Making risky architectural changes"
    - "Missing transformation documentation"